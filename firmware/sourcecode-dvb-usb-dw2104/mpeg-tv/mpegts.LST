C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE MPEGTS
OBJECT MODULE PLACED IN mpegts.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE mpegts.c OPTIMIZE(6,SPEED) INCDIR(C:\Keil\Target\Inc) CODE SYMBOLS

stmt level    source

   1          /* MPEG-TS transport stream over USB to PC.
   2          i2c support for the CX24116 in **Sharp BSBE2-401A NIM Tuner**
   3          !!! This is the firmware for linux to download as DVBworld usb device. "dvb-usb-dw2104.fw"
   4          device simulated: DVBWorld2104C model
   5          
   6          Linux driver dw2102.c config: 
   7          .devices ="DVBWorld DW2104 USB2.0"
   8          .i2c_algo = &dw2104_i2c_algo,
   9          .generic_bulk_ctrl_endpoint = 0x81,
  10          .download_firmware = dw2102_load_firmware,
  11          .read_mac_address = dw210x_read_mac_address,
  12          .frontend_attach = dw2104_frontend_attach,
  13          .stream = {.type = USB_BULK,.count = 8,.endpoint = 0x82,.buffersize = 4096,}
  14          
  15          command interface = EP0
  16           NOTE: if enabled in the kernel sourcecode, EP1 can be used for vendorcommands instaed of EP0 !
  17          per default: EP1 is not used!! 
  18          
  19          stream interface = 0x82 = EP2 slave fifo
  20          
  21          
  22          +++ CY7C68013A ENDPOINTS:
  23          EP0 = always control endpoint. This is used for command interface, i2c transfers and eeprom read...64Bytes
  24          EP2 =  unidirectional IN endpoint for mpegts streaming, slave fifo
  25          
  26          cx24116 TunerStatus Register 0x9D:
  27          bit:
  28          0 = Tuner PLL Lock Indicator, FE_HAS_SIGNAL, found something above the noise level 
  29          1 = Demodulator Sync Indicator, FE_HAS_CARRIER, found a DVB signal
  30          2 = Viterbi or LDPC Sync Indicator, FE_HAS_VITERBI, FEC is stable
  31          3 = Reed-Solomon or BCH Sync Indicator, FE_HAS_SYNC, found sync bytes, everything's working...
  32          4 = reserved
  33          5 = Low-Priority Sync Indicator
  34          6 = Front-End AGC Accumulator
  35          7 = Front-End AGC Accumulator
  36          
  37          +++ Bugs >>
  38          -- DVB Tuner, ir-receiver inside dvb-usb not working, it sends spurious keypresses:
  39          solution:
  40          -> create file /etc/modprobe.d/dvb-usb.conf, containing: options dvb-usb disable_rc_polling=1
  41             then on probe, driver does not load ir support.
  42             
  43          there migt be a problem when banana-pi reboots and usbdev stays active.
  44          - usb reconnect scenarios testing:
  45          press fx2lp powerbutton = works
  46          unplug/replug usb-cable = works
  47          reboot Pi while fx2lp stays on = ?
  48          powercycle Pi and fx2lp at same time = ?
  49          powercycle just fx2lp = 
  50          powercycle just Pi = 
  51             
  52          
  53          -- ubuntu-laptop: on device disconnect, the dvb-usb function dw2102_disconnect() causes a kernel Ooops: (d
             -w2102 kernel oops)
  54           usb 1-2: USB disconnect, device number 5
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 2   

  55          Nov 10 14:50:47 LinuxLaptop kernel: BUG: unable to handle kernel NULL pointer dereference at 0000000000000
             -008
  56          Nov 10 14:50:47 LinuxLaptop kernel: IP: [<ffffffffc09de1bd>] dw2102_disconnect+0x1d/0x50 [dvb_usb_dw2102]
  57          -> no solution. connect works. disconnect = kern oops/reboot.
  58          
  59          +++ EndBugs<<
  60          
  61          -- enable linux kernel debugging messages (dmesg):
  62          modprobe dvb-core dvbdev_debug=1 
  63          echo "options dvb-usb-dw2102 demod=2" > /storage/.config/modprobe.d/dw2104.conf
  64          linux usb errors encountered:
  65           -32 = broken pipe, fx2lp returned 0 causing stall
  66           -71 = protocol error, this should be used
  67           -19 = no such device. its disconnected
  68           -110 = Connection timed out.Timeout expired before the transfer completed
  69          
  70          -- firmware:
  71          There are 5 versions of DVB-USB-DW2104.fw:
  72          1. DVB-S2 USB 2104A (EARDA4B47, STB6100 + ST0903)
  73          2. DVB-S2 USB 2104B (sharp0169, stv6110A + ST0903)
  74          3. DVB-S2 USB 2104C (cx24116)
  75          4. DVB-S2 USB 2104D (montage_ts2020 + ds3000)
  76          5. DVB-S2 USB 2104E (SERIT2636, stv6110A + ST0903)
  77          
  78          -- fx2-board pin assignment:
  79          PORTA alternate Pin configurations is activated when  IFCONFIG = 0x03; enabling slave fifo mode:
  80          PIN   CONNECT  ALTFUNCTION
  81          ==========================
  82          PA0 = LED1 (normal port)
  83          PA1 = LED2 (normal port)
  84          
  85          //the following PA alt functions are all INPUTS!
  86          PA2 = +3.3v = SLOE = Slave Output Enable act-0. Sets the DataPort to Output!! else Input.
  87          PA3 = nc             WU2/wakeup           # is on +3.3v
  88          PA4 = GND = FIFOADR0 - encodes the fifo to be used ie. ep2,4,6,8
  89          PA5 = GND = FIFOADR1
  90          PA6 = +3.3v = PKTEND   use it to commit last packet at 0-transition.
  91          PA7 = GND = SLCS (FLAGD)  (slave fifo chip select). This can be used to disable the fifo data input!!!!  a
             -ct-0. high floats all fifo inputs!
  92          ---> PA7 function needs to be selected in PORTACFG = 0x40; 
  93          
  94          PB0 = D0 from tuner, the data input to fifo
  95          PB1 = D1
  96          PB2 = D2
  97          PB3 = D3
  98          PB4 = D4
  99          PB5 = D5
 100          PB6 = D6
 101          PB7 = D7
 102          
 103          PortD is normal port:
 104          PD0 = H/V control lnb 0=18V-H;1=13V-V
 105          PD1 = Tuner RESET. 0=ON;1=off
 106          PD2 = nc
 107          PD3 = nc
 108          PD4 = nc
 109          PD5 = output to enable the slave fifo outside port. usefull to isolate the cx24116 in case of trouble
 110          PD6 = nc
 111          PD7 = nc
 112          
 113          SCL = i2c
 114          SDA = i2c
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 3   

 115          IF Data output:
 116          SLRD = slave read strobe act-0. +3.3v (enables IFCLK). only used for data output!
 117          IF Data Input:
 118          SLWR = enable for IFCLK pin!act-0. -> inverted, DATA_VALID_TUNER act-1 . if 1, data is captured, else not
 119          
 120          IFCLK = input CLOCK mpeg stream from tuner. data-valid on rising edge of clock. same as fx2lp!
 121          CLKOUT = nc
 122          CTL0 = nc (FLAGA) - programable FLAG (EP asto FIFOADR[1:0]). this outputs slave-fifo ep2in full/transfers.
             - nice for debug
 123          CTL1 = nc (FLAGB) - FULL flag (EP asto FIFOADR[1:0])
 124          CTL2 = nc (FLAGC) - EMPTY flag (EP asto FIFOADR[1:0])
 125          
 126          
 127          https://groups.google.com/g/comp.arch.embedded/c/0X0vFWcoM0M/m/UZ7Gnunn__8J
 128          
 129          https://www.altx.ro/projects/dvb-usb-direct-interface/
 130          
 131          Copyright: Oct-2021  Thomas Krueger Germany
 132          */
 133          
 134          // place data items in order defined!!! we use it for the descriptor tables below.
 135          #pragma ORDER
 136          
 137          #define ALLOCATE_EXTERN   // this a special Keil define to format the following includefiles correctly!
 138          #include "fx2.h"
 139          #include "fx2regs.h"
 140          #include "fx2sdly.h"
 141          
 142          
 143          
 144          
 145          
 146          //macro: byte swap for the descriptor WORD-items
 147          #define BIGTOLITTLE(x)  ((x>>8)|(x<<8))
 148          
 149          //protos:
 150          void SetupCommand(void);
 151          bit vendorcommands(void);
 152          void Initialize(void);
 153          void delay( WORD ms);
 154          void cmd_transfer(void);
 155          bit i2c_read(BYTE wvalue, BYTE wlength);
 156          bit i2c_write(BYTE wlength);
 157          BYTE readreg(BYTE adr, BYTE reg);
 158          void I2Cinit(void);
 159          bit I2Cwrite(BYTE addr, BYTE length, BYTE xdata *dat);
 160          bit I2Cread(BYTE addr, BYTE length, BYTE xdata *dat);
 161          
 162          void mcopy(BYTE *from, BYTE *to, BYTE len);
 163          void ep2reset(void);
 164          
 165          // ++++++    XDATA ++++++ contains the USB Descriptors  +++++++++
 166          
 167          //defines for PID VID VERSION:
 168          
 169          #define VENDOR  0x04b4
 170          #define PRODUCT 0x2104   //dvb world usb device
 171          #define VERSION 0x600
 172          
 173          
 174          // NOTE: on 8081, portpins are bit addressable (really, how nice, SFR). syntax fe. bit5 of portA is named:
             - PA5 (see fx2regs.inc in keil includes)
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 4   

 175          #define LED1 PA0
 176          #define LED2 PA1
 177          #define POLARITY PD0
 178          #define CHIPRESET   PD1
 179          #define FIFOEN  PD5 // enable the slave fifo if 1
 180          
 181          // MUST start at even address!! check linker mapfile
 182          // insert dummy bytes if necessary
 183          DEVICEDSCR xdata myDeviceDscr  =
 184          {
 185              sizeof(DEVICEDSCR),         // Descriptor length
 186              DEVICE_DSCR,                        // Descriptor type
 187              0,                  // USB spec version 2.00
 188              0x02,
 189              0,                          // Device class
 190              0,                          // Device sub-class
 191              0,                          // Device sub-sub-class
 192              64,                         // Max packet size for EP0 (bytes). we have 64,
 193              BIGTOLITTLE(VENDOR), // Vendor ID (Future Technology Devices Intl). swap bytes!!
 194              BIGTOLITTLE(PRODUCT), // Product ID (FT8U100AX Serial Port)
 195              BIGTOLITTLE(VERSION), // Product version (1.00)
 196              1,                          // Manufacturer string index
 197              2,                          // Product string index
 198              3,                          // Serial number string index
 199              1                           // Number of configurations
 200          };
 201          
 202          // MUST start at even address!! see linker mapfile
 203          DEVICEQUALDSCR  xdata myDeviceQualDscr   =
 204          {
 205              sizeof(DEVICEQUALDSCR),     // Descriptor length
 206              DEVQUAL_DSCR,               // Descriptor type
 207              0,
 208              0x02,                       // USB spec version 2.00 as a WORD: lsByte first
 209              0,                          // Device class
 210              0,                          // Device sub-class
 211              0,                          // Device sub-sub-class
 212              64,                         // Max packet size for EP0 (bytes)
 213              1                           // Number of alternate configurations
 214          };
 215          
 216          // MUST start at even address!! check linker mapfile. This stuff is sent in one go alltogether!
 217          BYTE xdata myConfigDscr[]  =
 218          {
 219              sizeof(CONFIGDSCR),         // Descriptor length
 220              CONFIG_DSCR,                        // Descriptor Type
 221              0x12,               // Total len of this array. Will be set in init function!!**************************
 222              0x34,
 223              1,                          // Number of interfaces supported
 224              1,                          // Configuration index for SetConfiguration()
 225              0,                          // Config descriptor string index
 226              bmBUSPWR|bmSELFPWR,         // Attributes  bmSELFPWR=bit6, bmBUSPWR=bit7=must be set in any case.
 227              3,                          // Maximum Power Consumption in 2mA units 
 228          
 229              // interface 0 descriptor Management CommunicationClass interface
 230              sizeof(INTRFCDSCR),         // Descriptor length
 231              INTRFC_DSCR,                        // Descriptor type
 232              0,                          // Index of this interface (zero based)
 233              0,                          // Value used to select alternate
 234              1,                          // Number of endpoints
 235              0xff,                       // Class Code
 236              0,                  // Subclass Code
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 5   

 237              0,                  // Protocol Code
 238              2,                          // Index of interface string description
 239          
 240          
 241              //EP2 Descriptor bulk IN, 512 bytes for mpeg-ts
 242              sizeof(ENDPNTDSCR),  ENDPNT_DSCR, 0x82, EP_BULK, 0x00, 0x02, 0,
 243          
 244           };
 245          
 246          BYTE xdata dummy; // to make even address for next descriptor
 247          
 248          //languange ID
 249          // MUST start at even address!! check linker mapfile
 250          BYTE xdata string0[] =
 251          {
 252              4,  // length of this array
 253              STRING_DSCR,
 254              0x09,
 255              0x04   // US languagne code
 256          };
 257          
 258          //manufacturer
 259          // MUST start at even address!! check linker mapfile
 260          BYTE xdata string1[] =
 261          {
 262              8,  // length of this array
 263              STRING_DSCR,
 264              'T',00,
 265              'K',00,
 266              'R',00,
 267          };
 268          
 269          //product
 270          // MUST start at even address!! check linker mapfile
 271          BYTE xdata string2[] =
 272          {
 273              32,  // length of this array
 274              STRING_DSCR,
 275              'M',00,
 276              'P',00,
 277              'E',00,
 278              'G',00,
 279              '-',00,
 280              'T',00,
 281              'S',00,
 282              ' ',00,
 283              '-',00,
 284              'D',00,
 285              'o',00,
 286              'n',00,
 287              'g',00,
 288              'l',00,
 289              'e',00,
 290          };
 291          
 292          //serial
 293          BYTE xdata string3[] =
 294          {
 295              18,  // length of this array
 296              STRING_DSCR,
 297              'A',00,
 298              '1',00,
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 6   

 299              '2',00,
 300              '3',00,
 301              '4',00,
 302              '5',00,
 303              '6',00,
 304              'T',00,
 305          };
 306          
 307          
 308          
 309          
 310          // ++++++++++++  Data   +++++++++++++++++++++++++++++++++
 311          // we do not allow suspend/wakeup as processor never goes to sleep.
 312          bit Rwuen_allowed = 0;  // DisAllow remote wakeup, this also means Suspend is not allowed
 313          bit Rwuen = 0;          // Remote wakeup 0
 314          bit Selfpwr = 1;                // Device is  self-powered
 315          
 316          WORD ptr;
 317          BYTE Configuration;  // Current set device configuration
 318          BYTE Interface;      // Current set interface
 319          
 320          
 321          
 322          DWORD Millisecs;
 323          WORD Tim1, Delaytim;
 324          
 325          
 326          #define IOSIZE 70
 327          BYTE xdata Iobuf[IOSIZE]; // used for Rx and Tx I2C
 328          bit GotSudav=0; // if set, a setup request is pending.
 329          bit noSTOP=0; // controls repeat start
 330          
 331          
 332          BYTE Mac[8]= { 00,0x18,0xbd,0x5d,0xbf,0x78,0,0};
 333          
 334          
 335          
 336          // ++++++++++++++++++++     CODE +++++++++++++++++++++++++++
 337          
 338          // macro for generating the address of an endpoint's control and status register (EPnCS)
 339          #define epcs(EP) (EPCS_Offset_Lookup_Table[(EP & 0x7E) | (EP > 128)] + 0xE6A1)
 340          
 341          // this table is used by the epcs macro
 342          const char code  EPCS_Offset_Lookup_Table[] =
 343          {
 344              0,    // EP1OUT
 345              1,    // EP1IN
 346              2,    // EP2OUT
 347              2,    // EP2IN
 348              3,    // EP4OUT
 349              3,    // EP4IN
 350              4,    // EP6OUT
 351              4,    // EP6IN
 352              5,    // EP8OUT
 353              5,    // EP8IN
 354          };
 355          
 356          
 357          void main(void)
 358          {
 359   1          int i=0;
 360   1              unsigned int t,ini,p,f;
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 7   

 361   1              
 362   1          Initialize();
 363   1      
 364   1      // Disconnect the USB interface,wait about 1,5 seconds,  reconnect as new device
 365   1      
 366   1      // conditional DISCON cycle
 367   1      /*
 368   1      if (!(USBCS&0x02)) // if RENUM is 0 thats after initial c0 load from eeprom, firmware was downloaded first
             - time.
 369   1      {
 370   1          USBCS |= 0x0A; //disconnect (DISCON=1, RENUM=1)
 371   1          delay(1500);  //IMPORTANT, if no delay, device will not come up!
 372   1      }
 373   1      else
 374   1      */      
 375   1      // LED2=0; // debug led on if: RENUM was 1. host still downloads the firmware again, but that does not har
             -m. RENUM stays 1 over DISCON cycle.
 376   1      //*** we are flashing the device with C2 firmware,so the descriptors are uptodate. 
 377   1      //    the host will then download firmware again which may be different.        this way host only downloads 1 ti
             -me with no renumeration!
 378   1      LED1=0; // this indicates the downloaded firmware is running!
 379   1      FIFOEN=1; //disable fifoport from demodulator
 380   1          USBIRQ = 0xff;          // Clear any pending USB interrupt requests.
 381   1          EPIRQ = 0xff; // clear Endpoint ints
 382   1          EXIF &= ~0x10;      // clear USBINT
 383   1      
 384   1          // CT1 |= 0x02; // become FullSpeed Device. comment this out if you want to be a High-Speed Device.
 385   1         USBCS &= ~(0x08); // clear (DISCON=0).
 386   1         USBCS |=0x02; // set RENUM to use custom descriptors
 387   1      
 388   1      
 389   1          CHIPRESET=0;
 390   1          delay(200);
 391   1          CHIPRESET=1;
 392   1          delay(200);
 393   1              
 394   1      FIFOEN=0; //enable fifoport
 395   1      
 396   1      ini=0xffff;
 397   1      t=ini;
 398   1      
 399   1          while(1) //mainloop
 400   1          {
 401   2      
 402   2              
 403   2                      if (GotSudav)
 404   2                      {
 405   3                              GotSudav=0;
 406   3                        SetupCommand(); //serve the setup request.there will be no other setup request until the current one i
             -s serviced!.
 407   3                      }
 408   2      
 409   2      // check for EP2IN transfer problems:
 410   2      /* FIFOFULL , FIFOEMPTY and FIFOHALFFULL Flags are monitored 0xffff times:
 411   2       LED1: ON if FIFOFULL never active in period(Host is reading), AND FIFOEMPTY detected (Tuner not deliverin
             -g data)
 412   2       LED1: TOGGLE if FIFOFULL never active in period(Host is reading), AND FIFOEMPTY not detected (normal stre
             -aming)
 413   2       LED1: OFF if some FIFOFULL detected in period (Host not reading)
 414   2      
 415   2       LED2: ON if FIFOHALFFULL always active in period(Host not reading fast enough, calls RESETFIFO)
 416   2       LED2: OFF if FIFOHALFFULL not always active in period(Host reading fast enough)
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 8   

 417   2       states ON and OFF may change in interval period, so TOGGLE of LED2 is possible. (ChannelChange)
 418   2      
 419   2       normal streamstate:            LED2 OFF,       LED1=toggles. (Tuner delivers, Host reads)
 420   2       NoStreaming from Tuner:        LED2=OFF;       LED1=ON;          (Tuner not delivering, Host reads)
 421   2       NoStreaming at all:            LED2=OFF;       LED1=OFF;         (Tuner not delivering, Host not reading)
 422   2       
 423   2       NoStreaming to Host:           LED2=ON;        LED1=OFF;     (Tuner delivers, Host not reading fast enough, RESETFIFO)
 424   2       HostNotReading fast:           LED2=toggle; LED1=OFF;    (Tuner delivers, Host not reading fast enough, RESETFIFO)
 425   2       HostNotReading at all:         LED2=ON;        LED1=ON;          (Tuner not delivering, Host not reading fast enough, RESETF
             -IFO)
 426   2      */
 427   2      
 428   2                      if (!t) // check time interval
 429   2                      {
 430   3                              // LED1=show streamstate: 
 431   3                              
 432   3                              if (!f)    // no EPfull encountered,
 433   3                              {
 434   4                                      if (EP2FIFOFLGS &0x02) // if empty flag is set, there is no data coming from tuner, ie.not tuned
 435   4                                      LED1=0; //constantly ON = no tuner data coming ie. cx24116 does not stream
 436   4                                      else
 437   4                                      LED1=!LED1; // toggle = to indicate active streaming 
 438   4                              }
 439   3                              else // some full detected
 440   3                              {
 441   4                                      LED1=1; // some EPfull encountered, host not reading
 442   4                              }
 443   3                              
 444   3                              
 445   3                      // EPprog constantly ON=we had errors, we where constantly over 256bytes fillstate. blinks if state pers
             -ists.
 446   3                              if ((p==ini)||(f&&p)||(f==ini)) 
 447   3                              {
 448   4                                              LED2=0; // we have delivery problems, host not reading fast enough
 449   4      
 450   4                              // as to my fixup of the i2c communication being errorfree now, it seems no more problems appear.
 451   4                                              //ep2reset();
 452   4                                              
 453   4                              }
 454   3                              else
 455   3                                      LED2=1;
 456   3                      
 457   3                              // if f and p, then bad streaming, corrupt picture. kaffeine . maybe also reset 24116?!
 458   3                              // if f == t; no streaming output, player reports no input! then nothing happens any more. only on kaff
             -eine!
 459   3                              // p is always nonzero
 460   3                              // e is always zero
 461   3                              // f is nonzero if host read problem
 462   3                      
 463   3                      /*      //alternate test to above
 464   3                              if (f==ini) LED1=0; // nur das kommt
 465   3                              else LED1=1;
 466   3                              if (p==ini) LED2=0;
 467   3                              else LED2=1;
 468   3                      */      
 469   3                              
 470   3                              //reinit
 471   3                              t=ini;
 472   3                              p=f=0;
 473   3                      }
 474   2                      else //update status counters
 475   2                      {
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 9   

 476   3                              t--;
 477   3      // FlagBits: 0=full(1), 1=empty(2), 2=halffull(4)               
 478   3                              if (EP2FIFOFLGS &0x01) // if ep2 is full, fifo is full, host not read at all
 479   3                              {
 480   4                                      f++;
 481   4                              }
 482   3      
 483   3                              if (EP2FIFOFLGS &0x04) // if ep2 is prog, fifo half full, host not reading fast
 484   3                              {
 485   4                                      p++;
 486   4                              }
 487   3                              
 488   3                      }
 489   2                              
 490   2      
 491   2          } //endwhile
 492   1      
 493   1      }
 494          
 495          
 496          //-----------------------------------------------------------------------------
 497          // Control Endpoint 0 Device Request handler
 498          //-----------------------------------------------------------------------------
 499          
 500          /*
 501          bmRequestType:
 502          D7 Data Phase Transfer Direction
 503          0 = Host to Device WRITE
 504          1 = Device to Host READ
 505          D6..5 Type
 506          0 = Standard
 507          1 = Class
 508          2 = Vendor
 509          3 = Reserved
 510          D4..0 Recipient
 511          0 = Device
 512          1 = Interface
 513          2 = Endpoint
 514          3 = Other
 515          4..31 = Reserved
 516          SETUPDAT[0] = bmRequestType
 517          SETUPDAT[1] = bmRequest
 518          SETUPDAT[2:3] = wValue
 519          SETUPDAT[4:5] = wIndex
 520          SETUPDAT[6:7] = wLength of next data packet in or out
 521          */
 522          void SetupCommand(void)  // this an interrupt service routine!
 523          {
 524   1      
 525   1      
 526   1      
 527   1          // Errors are signaled by stalling endpoint 0.
 528   1      
 529   1          switch(SETUPDAT[0] & SETUP_MASK)    //0x60: switch by type
 530   1          {
 531   2      
 532   2          case SETUP_STANDARD_REQUEST: //0 = standard requests
 533   2              switch(SETUPDAT[1])
 534   2              {
 535   3              case SC_GET_DESCRIPTOR:
 536   3                  switch(SETUPDAT[3])
 537   3                  {
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 10  

 538   4                  case GD_DEVICE:
 539   4                      SUDPTRH = MSB(&myDeviceDscr);
 540   4                      SUDPTRL = LSB(&myDeviceDscr);
 541   4                      break;
 542   4      
 543   4                  case GD_DEVICE_QUALIFIER:
 544   4                      SUDPTRH = MSB(&myDeviceQualDscr);
 545   4                      SUDPTRL = LSB(&myDeviceQualDscr);
 546   4                      break;
 547   4      
 548   4                  case GD_CONFIGURATION:
 549   4                      SUDPTRH = MSB(&myConfigDscr);
 550   4                      SUDPTRL = LSB(&myConfigDscr);
 551   4                      break;
 552   4                  case GD_OTHER_SPEED_CONFIGURATION:
 553   4                      SUDPTRH = MSB(&myConfigDscr);
 554   4                      SUDPTRL = LSB(&myConfigDscr);
 555   4                      break;
 556   4                  case GD_STRING: //get string descriptor asto index in SETUPDAT[2]
 557   4                      switch (SETUPDAT[2])
 558   4                      {
 559   5                      case 0: //lang
 560   5                          ptr = &string0;
 561   5                          break;
 562   5                      case 1:
 563   5                          ptr = &string1;
 564   5                          break;
 565   5                      case 2:
 566   5                          ptr = &string2;
 567   5                          break;
 568   5                      case 3:
 569   5                          ptr = &string3;
 570   5                          break;
 571   5                      default:
 572   5                          ptr = 0;
 573   5                          break;
 574   5                      }
 575   4                      if (ptr) // if valid string supported
 576   4                      {
 577   5                          SUDPTRH = MSB(ptr);
 578   5                          SUDPTRL = LSB(ptr);
 579   5                      }
 580   4                      else
 581   4                          EZUSB_STALL_EP0();
 582   4                      break;
 583   4      
 584   4                  default:            // Invalid request
 585   4                      EZUSB_STALL_EP0();
 586   4                  }
 587   3                  break;
 588   3      
 589   3      
 590   3              case SC_GET_INTERFACE:
 591   3                  EP0BUF[0] = Interface;
 592   3                  EP0BCH = 0;
 593   3                  EP0BCL = 1;
 594   3                  break;
 595   3              case SC_SET_INTERFACE:
 596   3                  Interface = SETUPDAT[2];
 597   3                  break;
 598   3              case SC_SET_CONFIGURATION:
 599   3                  Configuration = SETUPDAT[2]; //wvalue
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 11  

 600   3                  break;
 601   3              case SC_GET_CONFIGURATION:
 602   3                  EP0BUF[0] = Configuration;
 603   3                  EP0BCH = 0;
 604   3                  EP0BCL = 1;
 605   3                  break;
 606   3              case SC_GET_STATUS:
 607   3                  switch(SETUPDAT[0])
 608   3                  {
 609   4                  case GS_DEVICE:
 610   4                      EP0BUF[0] = ((BYTE)Rwuen << 1) | (BYTE)Selfpwr; //selfpwr=bit0
 611   4                      EP0BUF[1] = 0;
 612   4                      EP0BCH = 0;
 613   4                      EP0BCL = 2;
 614   4                      break;
 615   4                  case GS_INTERFACE:
 616   4                      EP0BUF[0] = 0;
 617   4                      EP0BUF[1] = 0;
 618   4                      EP0BCH = 0;
 619   4                      EP0BCL = 2;
 620   4                      break;
 621   4                  case GS_ENDPOINT: //get stall status
 622   4                      EP0BUF[0] = *(BYTE xdata *) epcs(SETUPDAT[4]) & bmEPSTALL;
 623   4                      EP0BUF[1] = 0;
 624   4                      EP0BCH = 0;
 625   4                      EP0BCL = 2;
 626   4                      break;
 627   4                  default:            // Invalid Command
 628   4                      EZUSB_STALL_EP0();
 629   4                  }
 630   3                  break;
 631   3              case SC_CLEAR_FEATURE:
 632   3                   switch(SETUPDAT[0])
 633   3                  {
 634   4                  case FT_DEVICE:
 635   4                      if(SETUPDAT[2] == 1)
 636   4                          Rwuen = 0;       // Disable Remote Wakeup
 637   4                      else
 638   4                          EZUSB_STALL_EP0();
 639   4                      break;
 640   4                  case FT_ENDPOINT: // take out of stall
 641   4                      if(SETUPDAT[2] == 0)
 642   4                      {
 643   5                                      
 644   5      //#define epcs(EP) (EPCS_Offset_Lookup_Table[(EP & 0x7E) | (EP > 128)] + 0xE6A1)
 645   5                         *(BYTE xdata *) epcs(SETUPDAT[4]) &= ~bmEPSTALL; //clear endpoint stall bit
 646   5                          EZUSB_RESET_DATA_TOGGLE( SETUPDAT[4] );  //  and reset data-toggle.  
 647   5                      }
 648   4                      else
 649   4                          EZUSB_STALL_EP0();
 650   4                      break;
 651   4                  }
 652   3                  break;
 653   3              case SC_SET_FEATURE:
 654   3                  switch(SETUPDAT[0])
 655   3                  {
 656   4                  case FT_DEVICE:
 657   4                     if((SETUPDAT[2] == 1) && Rwuen_allowed)
 658   4                          Rwuen = 1;      // Enable Remote Wakeup
 659   4                      else
 660   4                          EZUSB_STALL_EP0();
 661   4                      break;
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 12  

 662   4                  case FT_ENDPOINT: // stall endpoint
 663   4                      *(BYTE xdata *) epcs(SETUPDAT[4]) |= bmEPSTALL; // set endpoint stall bit
 664   4                      break;
 665   4                  default:
 666   4                      EZUSB_STALL_EP0();
 667   4                  }
 668   3                  break;
 669   3              default:  // *** Invalid Command
 670   3                  EZUSB_STALL_EP0();
 671   3                  break;
 672   3              }
 673   2              break;
 674   2              // end standard requests
 675   2      
 676   2          case 0x40: // vendor commands
 677   2              if (vendorcommands() == 1)
 678   2                  break;
 679   2      /* test: unknown setup commands . i did not find any!
 680   2                      else
 681   2                      {
 682   2                              if (SETUPDAT[0]==0x40) //write
 683   2                              LED1=0; //test
 684   2                              else
 685   2                                      LED2=0; //test
 686   2                      }
 687   2      */
 688   2          default: // unknown request
 689   2              // negative acknowledge/not supprted
 690   2              EZUSB_STALL_EP0(); //No answer!. set stall-bit in ep0cs.  the USB core sends the STALL PID for any
             - IN or OUT token.
 691   2              break;
 692   2          }
 693   1      
 694   1          // Acknowledge handshake phase of device request
 695   1          EP0CS |= bmHSNAK; // ACK the transfer. clear bit7 in ep0cs by writing a 1 to it. this instructs the US
             -B core to ACK the STATUS stage.
 696   1      }
 697          
 698          //returns 1 if successfull processed, else 0 to stall ep0 as nack.
 699          bit vendorcommands(void)
 700          {
 701   1          /*
 702   1          format of the linux-driver call function:
 703   1          u8 request, u16 value, u16 index, u8 * data, u16 len. -> bmRequest, wValue, wIndex, EP0buf, wLength.
 704   1      
 705   1          Endpoint 0 has only one 64 bytes data buffer for either read or write. The 8 Byte SETUP message reside
             -s in a different buffer.
 706   1          This is used for command interface like i2c transfers, read or write, reset-control, HV setting etc.:
 707   1          SETUPDAT[0] contains the direction bit (Bit7).
 708   1          0=write operation
 709   1          1=read operation
 710   1          Format of the received 8-Byte SETUP message for our command interface:
 711   1          SETUPDAT[1] = bmRequest is the vendor request. ie. the command given to us.
 712   1          SETUPDAT[2:3] = wValue, not used, 0 or the registeraddress, or offset when software download.
 713   1          SETUPDAT[4:5] = wIndex, not used always 0
 714   1          SETUPDAT[6:7] = wLength of data in EP0BUF, if any. this contains the i2c transfer request:
 715   1          content of the 64byte EP0BUF on receiving a i2c-request:
 716   1          i2c_address_with direction_bit_set; length of requested transfer in bytes; [ Registeraddress, [Data...
             -]]
 717   1          so DATA-section at offset 2.
 718   1              
 719   1              TESTED on 29.01.2022, fixed EP0 BUSY check in write operations. Now no error in communication with cx2411
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 13  

             -6!
 720   1          */
 721   1      
 722   1          BYTE wvalue,wlength,windex;
 723   1          BYTE i;
 724   1          BYTE ret_len=0;
 725   1      
 726   1              wvalue= SETUPDAT[2];
 727   1          windex= SETUPDAT[4];
 728   1          wlength=SETUPDAT[6];
 729   1              
 730   1      
 731   1      // +++READ: we need to return data in EP0BUF
 732   1          if (SETUPDAT[0] == 0xC0)
 733   1          {
 734   2      
 735   2              switch(SETUPDAT[1]) // Request, command interface , the command
 736   2              {
 737   3      
 738   3                      // i2c_read from wvalue=i2c_adr<<1; wlength=transferlen -2; put result in ep0buf_offset=2.
 739   3              case 0xC3: //read from current registerpointer of cx24116 the registervalue(s):
 740   3                              if (!i2c_read( wvalue, wlength)) 
 741   3                              {
 742   4                                      wlength=0;
 743   4                                      return(0); // this is new
 744   4                              }
 745   3                              ret_len=wlength;
 746   3                              break;
 747   3                      
 748   3      
 749   3              case 0xB8: //RC query, remote control query if command was given.READ, expects 2 byte being return
             -ed.
 750   3                              if (wlength==2)
 751   3                              {
 752   4                              EP0BUF[0]=0;
 753   4                              EP0BUF[1]=0;
 754   4                              ret_len=wlength;  // this caused trouble, sporadic chars in terminal
 755   4                              }
 756   3                  break;
 757   3                              
 758   3              case 0xB6: //read eeprom 256 byte in chunks of 2byte using windex as offset.firstbyte is value, se
             -cond byte is 0.
 759   3                  i=windex&7;
 760   3                  EP0BUF[0]=Mac[i];
 761   3                  ret_len=2;
 762   3                  break;
 763   3                              
 764   3       //       case 0xB5: // read from tuner, frequency
 765   3       //           break;
 766   3      
 767   3              default:
 768   3                              return(0); // not supported, stall endpoint
 769   3              }
 770   2      
 771   2       if (ret_len) // arming an endpoint is done by setting the bytecount register. here we send zero length pa
             -ckets!
 772   2              {
 773   3                  EP0BCH = 0;
 774   3                  EP0BCL = ret_len;
 775   3              }
 776   2      
 777   2          } // end read
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 14  

 778   1      
 779   1      // +++WRITE: EP0OUT, we do not need to return data, just ACK
 780   1          else if (SETUPDAT[0] == 0x40)
 781   1          {
 782   2                      
 783   2              switch(SETUPDAT[1]) // Request, command interface , the command
 784   2              {
 785   3              case 0xB2: //set voltage control or write tuner.WRITE: 2 bytes, 0x30=setvoltage,setvalue 1=18V-Hor
             -,0=14V-Vert
 786   3                      // the band select is done by 22khz signal send from the cx24116 which is send by a write command.
 787   3                      if (EP0BUF[0]==0x30) // set voltage
 788   3                      {
 789   4                              if (EP0BUF[1]) // if vertical
 790   4                              POLARITY=0; //V
 791   4                              else
 792   4                              POLARITY=1; //H
 793   4                      delay(10);
 794   4                      }
 795   3                  break;
 796   3      
 797   3                      // write to cx24116 including a registervalue to set the registerpointer. 
 798   3              case 0xC2: //write cx24116 register.EP0BUF: i2c_address<<1, transfer_len_requested, : registervalu
             -e,[Data...]
 799   3                  if (!i2c_write(wlength))
 800   3                  {
 801   4                      //it fails if i2c adr != 0xaa fe. probing a ds3000 device.
 802   4                      // important: we have to wait for the BUSY bit in EP0CS to clear, so the EP0-OUT transfer is completed. 
 803   4                      // testing:
 804   4                      // ;//LED1=0; //write error occured
 805   4                      // ;// if (EP0BUF[0]!=0xaa) LED2=0; // wrong i2c address encountered
 806   4                 return(0); 
 807   4                  }
 808   3                  
 809   3                  break;
 810   3      
 811   3              case 0xC4: //write, reset cx34116 going active one byte of data telling the reset state wanted.
 812   3                              if (EP0BUF[0]==1) // do a cx24116 reset cycle
 813   3                              {
 814   4                              CHIPRESET=0;
 815   4                              delay(10);
 816   4                              CHIPRESET=1;
 817   4                              delay(10);
 818   4                              }
 819   3                  break;
 820   3      
 821   3              case 0xBF: //write, wData=0x40, reset cx34116 going inactive. we not use this as zerolength data p
             -acket trouble
 822   3                  break;
 823   3      
 824   3              case 0x8A: //voltage control, HV ?? this is done above!
 825   3                      break;
 826   3      
 827   3      //        case 0x80: //write firmware(download after usb connect). we do not see this!!
 828   3      //            break;
 829   3      
 830   3              default:
 831   3               return(0); // not supported, stall endpoint
 832   3              }
 833   2      
 834   2      
 835   2      
 836   2          } //end write
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 15  

 837   1      
 838   1      // some delay seems good;)
 839   1              SYNCDELAY;
 840   1      /*      
 841   1              SYNCDELAY;
 842   1              SYNCDELAY;
 843   1              SYNCDELAY;
 844   1              SYNCDELAY;
 845   1              SYNCDELAY;
 846   1              SYNCDELAY;
 847   1              SYNCDELAY;
 848   1              SYNCDELAY;
 849   1      */
 850   1          return (1); //OK
 851   1      }
 852          
 853          
 854          void Initialize(void)
 855          {
 856   1      
 857   1          // init outputs for leds. led1=PA0,led2=PA1
 858   1          OEA=0x03; // output direction
 859   1          IOA=0x03; //off
 860   1          // init outputs on Port D for : PD0=14=1/18V=0 select,PD1=chipReset act 0, Debug serial output PD5
 861   1          OED=0x23; // output direction
 862   1          IOD=0x20; //Reset on=0, 18V, uart=1
 863   1      
 864   1          I2Cinit();
 865   1      
 866   1      
 867   1          // init timer0 as delay timer
 868   1          TMOD = 0x10; //timer0 as 13bit timer with overflow int enabled; timer1 as 16bit up counter,clocked at 
             -12Mhz.
 869   1          TH0 = 0;                    // load 16bit count-register
 870   1          TL0 = 0;
 871   1          TR0 = 1;                    // Start timer0
 872   1      //      PT0 = 1; // set tim0 to high prio
 873   1          ET0 = 1; // enable timer0 ints
 874   1      
 875   1      
 876   1      
 877   1      
 878   1          // adjust the length of the total config descriptor, as it cannot be evaluated at compiletime
 879   1          ptr = sizeof(myConfigDscr);
 880   1          myConfigDscr[2]=ptr;
 881   1          myConfigDscr[3]=ptr>>8;
 882   1      
 883   1          CPUCS = 0x10; // CLKSPD[1:0]=10, set 48 MHz operation
 884   1          SYNCDELAY;
 885   1          CKCON=0; // set stretch value to 0 = fastest DATA access. also timers are clocked by 48MHZ/12
 886   1          SYNCDELAY;
 887   1      
 888   1      // auto arming endpoints and cpu intervention control for the slave fifo. only relevant for out transfers.
 889   1          REVCTL=0x03;
 890   1          SYNCDELAY;
 891   1      
 892   1          IFCONFIG = 0x03; // this connects the slavefifo control/data pins to the ports.
 893   1          SYNCDELAY;
 894   1              
 895   1          /*
 896   1          Bit 0-1: = 0x03 , sets IFCFG to slave fifo mode, external master.
 897   1          Bit 2: = 0, disable GSTATE output on PE pins
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 16  

 898   1          Bit 3: = 0, ASYNC off, selects synchronious mode ie. sycronious to the input clock ifclk
 899   1          Bit 4: = 0, IFCLK polarity = not inverted
 900   1          Bit 5: = 0, IFCLKOE is off as we are inputting the clock from outside
 901   1          Bit 6: = 0, 3048mhz, internal fifo clock frequency 0=30mhz, 1=48mhz, only relevant if IFCLKSRC = 1. 
 902   1          Bit 7: = 0, IFCLKSRC, fifo clock source. 0=external, 1=internal asto 3048mhz. we use external clock fr
             -om tuner!!!
 903   1      
 904   1          The fifo databus-width is selected in the EP2FIFOCFG register, bit0  (WORDWIDE) 0=8-bit mode.
 905   1          NOTE: bit0 (WORDWIDE) must be clear in all EPxFIFOCFG registers!!
 906   1      
 907   1           IFCLK Source external (i.e.) connected to MPEG_CLK minimum should be 5 MHz
 908   1           Synchronous Mode, Free Running MPEG_CLK,  MPEG_VALID is used as SLWR strobe
 909   1           FX2LP in SLAVE FIFO Mode
 910   1           */
 911   1               
 912   1      // reset all fifos:
 913   1          FIFORESET = 0x80; // activate NAK-ALL to avoid race conditions. ie. NAK all transfers
 914   1          SYNCDELAY; // see TRM section 15.14
 915   1      
 916   1          FIFORESET = 0x82; // reset, FIFO 2
 917   1          SYNCDELAY; //
 918   1      
 919   1          FIFORESET = 0x84; // reset, FIFO 4
 920   1          SYNCDELAY; //
 921   1      
 922   1          FIFORESET = 0x86; // reset, FIFO 6
 923   1          SYNCDELAY; //
 924   1      
 925   1          FIFORESET = 0x88; // reset, FIFO 8
 926   1          SYNCDELAY; //
 927   1      
 928   1          FIFORESET = 0x00; // deactivate NAK-ALL, resume normal operation
 929   1          SYNCDELAY;
 930   1      
 931   1      // clear all fifo flags
 932   1          PINFLAGSAB = 0x00; //defines FLAGA as prog-level flag = half full,FLAGB as full flag
 933   1          SYNCDELAY;
 934   1          PINFLAGSCD = 0x00; //FLAGC as empty flag, FLAGD (PA7) is not activated
 935   1          SYNCDELAY;
 936   1      // set fill level of FLAGA=level-programmable flag to 512/2=256 so you have a nice squarwave to monitor on
             - scope.
 937   1      // 0xC1 = FLAGA asserts if 256 Bytes have filled the fifo
 938   1      // 
 939   1      
 940   1              EP2FIFOPFH = 0xC1; //0xC1;  (1,0)= fill-level bits8,9; BIT7=DECIS=1; BIT6=PKTSTAT=1. default=0x88;
 941   1              SYNCDELAY; // to be active at the level you wish
 942   1              EP2FIFOPFL = 0x00; // = fill level lowbyte. default=0x00;
 943   1              SYNCDELAY;
 944   1      
 945   1      
 946   1          PORTACFG = 0x40; //used PA7 as SLCS, the slave fifo chip select
 947   1          SYNCDELAY;
 948   1      
 949   1          FIFOPINPOLAR = 0x04; // SLWR is configured as active HIGH : PKTEND is active high
 950   1          SYNCDELAY;
 951   1      
 952   1      
 953   1          EP2CFG = 0xE0;   // VALID - 1,DIR - IN,Type- Bulk, Size - 512 Bytes, Quad Buffered
 954   1          SYNCDELAY;
 955   1      
 956   1          EP4CFG = 0x00; // clear valid bit
 957   1          SYNCDELAY; //
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 17  

 958   1      
 959   1          EP6CFG = 0x00;       // clear valid bit
 960   1          SYNCDELAY; //
 961   1      
 962   1          EP8CFG = 0x00; // clear valid bit
 963   1          SYNCDELAY;
 964   1      
 965   1      // config ep2 as datainput slave fifo
 966   1          EP2FIFOCFG = 0x08; // 0x08 = autoin, or 0x0c = +allow 0-length packets. AUTO IN asto AUTOINLEN, NO Zer
             -o Length Packets, 8- bit Wide bus (bit0=WORDWIDE = 0 for 8bit mode).
 967   1          SYNCDELAY;
 968   1      
 969   1          EP2AUTOINLENH = 0x02; // Auto-commit 512-byte packets
 970   1          SYNCDELAY;
 971   1      
 972   1          EP2AUTOINLENL = 0x00;
 973   1          SYNCDELAY;
 974   1              
 975   1          // clear all fifo WORDWIDE bits to enable Port D as GPIO. maybe we need to set IFCONFIG after here !!!
 976   1          EP4FIFOCFG = 0x00;
 977   1          SYNCDELAY;
 978   1      
 979   1          EP6FIFOCFG = 0x00;
 980   1          SYNCDELAY;
 981   1      
 982   1          EP8FIFOCFG = 0x00;
 983   1          SYNCDELAY;
 984   1      
 985   1      
 986   1      // arm ep0buf
 987   1      /*
 988   1          EP0BCH = 0;
 989   1          EP0BCL = 64;
 990   1      */
 991   1      
 992   1      
 993   1      
 994   1      //    AUTOPTRSETUP |= 0x01;         // enable dual autopointer feature for easy data copy
 995   1      //    Rwuen = 1;                 // Enable remote-wakeup
 996   1          INTSETUP=0; //disable autovector interrupts
 997   1          GPIFIE=0; //disable INT4 ints, GPIF stuff
 998   1      
 999   1      
1000   1      
1001   1      
1002   1          SUDPTRCTL = 1; //use automatic descriptor sending in SETUP requests ( AUTO mode). descriptor needs to 
             -be at even address!!
1003   1      
1004   1      // EndPoint interrupts: are enabled in EPIE. They are flagged in EPIRQ. Active EPIRQ ints cause a USBINT (
             -int2) where the source can be checked in EPIRQ.
1005   1      // in the USBINT service routine you can also check the autovector-value in INT2VEC register to tell the s
             -ource.
1006   1          EPIE |= 0x02 ;              // Enable EP0OUT interrupt
1007   1      
1008   1      
1009   1          // Note: The Endpoint Interrupts also cause a USBINT, even when nothing is enabled in USBIE.
1010   1          // USBINT is actually INT2 being used as USB interrupt
1011   1          // Enable Bits in the USBIE interrupt source register, served by interrupt 8 vector in USBINT:
1012   1          USBIE = 0x11; //SUDAV(0), URES(4)
1013   1      // general interrupt enable
1014   1          EUSB = 1; // enable USB interrupt
1015   1          EA = 1;  //   IE = 0x80; //global interrupt enable
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 18  

1016   1      }
1017          
1018          
1019          /*
1020          INT2 = USBINT  general interrupt service:  (except RESUME)
1021          This is the only vector for all USB related interrupts.
1022          - all USBINTS flagged in USBIRQ-register and enabled in USBIE register
1023          - all flagged EPIRQ ints enabled in EPIE
1024          The 27 sources of the USBINT can be determined by the register INT2IVEC.
1025          It hold the autovector value of the source, but we disabled autovectoring, so use a switch to indentify th
             -e source.
1026          see Techman page 63!
1027          */
1028          void USB_isr(void) interrupt 8
1029          {
1030   1      
1031   1      
1032   1      
1033   1          switch (INT2IVEC)
1034   1          {
1035   2          case 0: //SUDAV setup command received. We just received the EP0 SETUP stage
1036   2              USBIRQ = 0x01;  // Clear SUDAV IRQ_bit by write a 1 to it.
1037   2      
1038   2      // if vendor_write and nonzero wlength, enable ep0buf out data stage, so the out transfer can happen.
1039   2      // a datastage only follows, if wlength is non zero!!!
1040   2                      if ((SETUPDAT[0]==0x40)&&SETUPDAT[6]) 
1041   2                      {
1042   3                              // delay setup processing until datastage has arrived
1043   3                              EP0BCL = 0; // trigger ep0out interrupt
1044   3                              SYNCDELAY;
1045   3      
1046   3                      }
1047   2                      else
1048   2                      GotSudav=1; //request setup processing in main loop, no datastage
1049   2                              
1050   2       // the EP0 OUT datastage has not been received yet, so we arm EP0BUF for it.
1051   2       // only set EP0BCL, this starts the ep0-out datastage and sets the BUSY bit in EP0CS. 
1052   2       // we then wait for BUSY-bit to clear to indicate that the ep0 datastage has arrived.
1053   2              break;
1054   2       
1055   2              case 0x24: //  EP0-OUT data has arrived in setup request with data stage
1056   2                      EPIRQ = 0x02; // clear ep0out int flag
1057   2                      GotSudav=1; //request setup processing in main loop, datastage
1058   2                      
1059   2              break;
1060   2                      
1061   2              case 0x10: //USB Reset issued by host. happens when host does a reconnect after it disconnects the device
             -.
1062   2              USBIRQ = bmURES; // Clear URES IRQ
1063   2              break;
1064   2              
1065   2          default:
1066   2              break;
1067   2          }
1068   1          EXIF &= ~0x10; // Clear  USB_IRQ irq flag
1069   1      
1070   1      }
1071          
1072          // 2.047 msecs passed. the system tick service routine using timer0. It always interrupts as has high prio
             -!!
1073          // global vars: millisecs, tim1, tim2 = custom downcounters
1074          void Tim0_int(void) interrupt 1
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 19  

1075          {
1076   1          Millisecs += 2;
1077   1          if (Tim1) Tim1--;
1078   1          if (Delaytim) Delaytim--;
1079   1      }
1080          
1081          // reset the ep2 in fifo in case of trouble. FIFO_RESET in manual
1082          /*
1083          void ep2reset(void) // see also e6a3/ep2cs register!
1084          {
1085          FIFOEN = 1;             
1086          
1087          
1088                  
1089                                                     FIFORESET = 0x80; // activate NAK-ALL to avoid race conditions. ie. NAK all transfers
1090                                                          SYNCDELAY; // see TRM section 15.14
1091          
1092          
1093                                                          EP2FIFOCFG = 0x00;   //switching to manual mode
1094                                                          SYNCDELAY;
1095                                                          
1096                                                          FIFORESET = 0x82; // reset, FIFO 2
1097                                                          SYNCDELAY; //
1098                                                          FIFORESET = 0x82; // reset, FIFO 2
1099                                                          SYNCDELAY; //
1100                                                          
1101                                                          
1102                                                          EP2FIFOCFG = 0x08;  //switching back to auto-in mode
1103                                                          SYNCDELAY;
1104          
1105                                                          FIFORESET = 0x00; // deactivate NAK-ALL, resume normal operation
1106                                                          SYNCDELAY;
1107                          
1108          FIFOEN = 0;             
1109                          
1110          }
1111          */
1112          
1113          /*
1114          delay function
1115          ms = miliseconds wanted to wait, > 1
1116          */
1117          void delay( WORD ms)
1118          {
1119   1          Delaytim=ms/2;
1120   1      
1121   1          while (Delaytim); // use timer0 for countdown
1122   1      
1123   1      }
1124          
1125          
1126          // copy memory
1127          void mcopy(BYTE *from, BYTE *to, BYTE len)
1128          {
1129   1              while (len--) *to++=*from++;
1130   1      }
1131          
1132          
1133          /* read transfer_len bytes from starting register in cx24116, using its autoincrement feature for the regi
             -ster pointer.
1134          (needs to be enabled in reg 0xf4_bit7, otherwise we will read from the same register as usefull in tuner t
             -ransit.)
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 20  

1135          
1136          entry:
1137          - wvalue = i2c-address <<1
1138          - wlength = total length + 2
1139          
1140          exit:
1141          The data is in EP0BUF matching wlength
1142          - 1=OK; 0=fail
1143          */
1144          bit i2c_read(BYTE wvalue, BYTE wlength)
1145          {
1146   1          bit ret;
1147   1          BYTE adr=wvalue >> 1; // convert back to normal address
1148   1          BYTE len=wlength - 2;
1149   1      
1150   1          if ((len>IOSIZE)||(wlength < 3)) return (0);
1151   1              
1152   1          ret=I2Cread(adr, len, Iobuf);
1153   1          mcopy(Iobuf, &EP0BUF[2], len);
1154   1          return (ret);
1155   1      }
1156          
1157          /* write transfer_len bytes from starting register to cx24116, using its autoincrement feature for the reg
             -ister pointer.
1158          (needs to be enabled in reg 0xf4_bit7, otherwise we will read from the same register as usefull in tuner t
             -ransit.)
1159          
1160          entry:
1161          - wlength = total length of data in EP0BUF
1162          
1163          exit:
1164          The data is written
1165          - 1=OK; 0=fail
1166          */
1167          bit i2c_write(BYTE wlength)
1168          {
1169   1          bit ret;
1170   1          BYTE adr=EP0BUF[0]>>1; // convert back to normal address
1171   1          BYTE len=wlength -2; // sub 2 as the data to write begins at offset 2
1172   1      
1173   1          if (len>IOSIZE) return (0);
1174   1          mcopy(&EP0BUF[2], Iobuf, len); // copy register and possible data
1175   1          ret=I2Cwrite(adr, len, Iobuf); //set register-pointer
1176   1          return (ret);
1177   1      }
1178          
1179          /*
1180          //reads one byte from register reg. it first writes the registeraddress to access, then reads its value.
1181          // it uses noStop to do this without releasing the i2c bus in between the 2 transfers. 
1182          // returns byte red. sets global Error bit.
1183          BYTE readreg(BYTE adr, BYTE reg)
1184          {
1185              noSTOP=1; // enable restart with no stop
1186              // first set the register by doig a write
1187              Iobuf[0]=reg;
1188              I2Cwrite(adr, 1, Iobuf);
1189              noSTOP=0;
1190              I2Cread(adr, 1, Iobuf);
1191              return(Iobuf[0]);
1192          }
1193          */
1194          
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 21  

1195          
1196          // +++++++++   I2C stuff +++++++++++++++++++++++++++++++++
1197          
1198          #define I2C_IDLE              0     // I2C Status: Idle mode
1199          #define I2C_SENDING           1     // I2C Status: I2C is sending data
1200          #define I2C_RECEIVING         2     // I2C Status: I2C is receiving data
1201          #define I2CRECSTART             3     // I2C Status: I2C is receiving the first byte of a string
1202          #define I2C_STOP              5     // I2C Status: I2C waiting for stop completion
1203          #define I2C_BERROR            6     // I2C Status: I2C error; Bit Error
1204          #define I2C_NACK              7     // I2C Status: I2C error; No Acknowledge
1205          #define I2C_WAITSTOP          9     // I2C Status: Wait for STOP complete
1206          #define TNG 1
1207          
1208          struct
1209          {
1210              BYTE   length;
1211              BYTE   *dat;
1212              BYTE   count;
1213              BYTE   status;
1214          }  I2CPckt;
1215          
1216          
1217          
1218          void I2Cinit(void)
1219          {
1220   1          I2CPckt.status = I2C_IDLE;
1221   1          I2CTL = 0x03; // enable I2C Stop interrupt, enable 400 khz
1222   1          EI2C = 1;   // Enable I2C interrupt. int occurs on DONE or STOP
1223   1      }
1224          
1225          
1226          /* write length bytes to device at i2c_address:
1227          min length = 1.
1228           ret: 1=ok, 0=fail.
1229           */
1230          bit I2Cwrite(BYTE addr, BYTE length, BYTE xdata *dat)
1231          {
1232   1          I2CS |= bmSTART; // write operation
1233   1          I2DAT = addr << 1;  // send address and create start condition
1234   1      
1235   1          I2CPckt.status = I2C_SENDING;
1236   1      
1237   1          I2CPckt.length = length;
1238   1          I2CPckt.dat = dat;
1239   1          I2CPckt.count = 0;
1240   1      
1241   1          while (I2CPckt.status != I2C_IDLE) //while not finished 
1242   1          {
1243   2              if ( I2CPckt.status == I2C_NACK) // NACK detected, slave not respond
1244   2              {
1245   3                  I2CS |= bmSTOP; // force stop condition, otherwise we hang
1246   3                  I2CPckt.status = I2C_WAITSTOP;
1247   3                  return 0;
1248   3              }
1249   2          }
1250   1          return(1);
1251   1      }
1252          
1253          
1254          /* read length bytes from device at i2c_address:
1255          min length = 1.
1256           ret: 1=ok, 0=fail. xdata pointer as ep0outbuf is also in xdata
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 22  

1257           */
1258          bit I2Cread(BYTE addr, BYTE length, BYTE xdata *dat)
1259          {
1260   1          I2CS |= bmSTART; // next write to I2DAT generates a start condition
1261   1          I2DAT = (addr << 1) | 0x01; // send first byte=address into dat register and create start-condition
1262   1      
1263   1          I2CPckt.status = I2CRECSTART; // start the reception on next DONE interrupt
1264   1      
1265   1          I2CPckt.length = length;
1266   1          I2CPckt.dat = dat;
1267   1          I2CPckt.count = 0;
1268   1      
1269   1          while (I2CPckt.status != I2C_IDLE) //while not finished
1270   1          {
1271   2              if ( I2CPckt.status == I2C_NACK) // NACK detected, slave not respond
1272   2              {
1273   3                  I2CS |= bmSTOP; // force stop condition, otherwise we hang
1274   3                  I2CPckt.status = I2C_WAITSTOP;
1275   3                  return 0;
1276   3              }
1277   2          }
1278   1          return(1);
1279   1      }
1280          
1281          
1282          /* I2C INT
1283          fires when a stop condition is completed, or a TransferDone of one byte is signaled(DONE-Bit).
1284          DONE=1 indicates transfer complete 1 byte. ACK bit will be set at the same time it sets DONE=1, if no ACK 
             -bit, its a NACK.
1285           a NACK during write operation indicates a slave not responding/ not there.
1286          
1287           Repeat-Start means, that after a i2c transfer no i2c_stop is generated but another i2c_start. a delay in 
             -between is ok.
1288           After a repeat start, the slave address must be send!.
1289          
1290           SDA remains Low and Bus is in Busy condition for infinite time, until a Start or Stop event happens.no ot
             -her busmaster can claim the bus then.
1291           Normally the SDA line must not changge while SCL is high, but:
1292           Start condition: SDA drops from high to Low while SCL is High.
1293           Stop condition:  SDA rises from low to High while SCL is High.
1294           Bus Busy condtition: SCL is High while SDA is Low.
1295           A Slave can pull SCL low to indicate its not ready to send now, this is called clock stretching. But norm
             -ally SCL is High.
1296           
1297           The noStop flag can be set to enable multible transfer without releasing the Bus.
1298           This is usefull fe. to transfer data in passthrough from cx24116 to the tuner.
1299          */
1300          void i2c_isr(void) interrupt 9
1301          {
1302   1          // I2C State Machine
1303   1      
1304   1          if(I2CS & bmBERR)
1305   1          {
1306   2                      // a second bus-master was detect, creating a busconflict. This should never happen!
1307   2              I2CPckt.status = I2C_BERROR; // BUSERROR: we cannot resolve this state!!! possibly issue a STOP re
             -quest.
1308   2          }
1309   1          else if ((!(I2CS & bmACK)) && (I2CPckt.status != I2C_RECEIVING)) 
1310   1              // NACK: no acknowledge during write operation(DONE=1), ie. slave didnt respond!
1311   1          {
1312   2              I2CPckt.status = I2C_NACK; 
1313   2                      // Note that ACK-Bit is only meaningful in a write transaction as it is generated by the slave.
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 23  

1314   2      
1315   2          }
1316   1          else
1317   1          {
1318   2              switch(I2CPckt.status)
1319   2              {
1320   3              case I2C_SENDING:
1321   3                  I2DAT = I2CPckt.dat[I2CPckt.count++];
1322   3                  if(I2CPckt.count == I2CPckt.length)
1323   3                      I2CPckt.status = I2C_STOP;
1324   3                  break;
1325   3              case I2CRECSTART:
1326   3                  I2CPckt.dat[I2CPckt.count] = I2DAT; // clock in next byte by reading from DAT register. this i
             -s a dummy read.
1327   3                  I2CPckt.status = I2C_RECEIVING;
1328   3                  if(I2CPckt.length == 1) // may be only one byte to read
1329   3                      I2CS |= bmLASTRD;  // issue NACK to slave: float SDA at ACK-time to create a NACK to the s
             -lave to stop sending
1330   3                  break;
1331   3              case I2C_RECEIVING:
1332   3                  if(I2CPckt.count == I2CPckt.length - 2)
1333   3                      I2CS |= bmLASTRD; // issue NACK to slave, last byte
1334   3                  if(I2CPckt.count == I2CPckt.length - 1)
1335   3                  {
1336   4                      if (!noSTOP) //no multibyte io
1337   4                      {
1338   5                          I2CS |= bmSTOP; // release the bus
1339   5                      }
1340   4                      I2CPckt.status = I2C_IDLE;
1341   4                  }
1342   3                  I2CPckt.dat[I2CPckt.count] = I2DAT;
1343   3                  ++I2CPckt.count;
1344   3                  break;
1345   3      
1346   3      //stop after sending. this releases the bus and may not be desired. instead a new start can be signaled to
             - continue with a new transmission.
1347   3              case I2C_STOP:
1348   3                  if (noSTOP) // multibyte io
1349   3                      I2CPckt.status = I2C_IDLE;
1350   3                  else
1351   3                  {
1352   4                      I2CS |= bmSTOP; // release the bus
1353   4                      I2CPckt.status = I2C_WAITSTOP;  // wait for next STOP interrupt
1354   4                  }
1355   3      
1356   3                  break;
1357   3              case I2C_WAITSTOP: //triggered by the STOP interrupt
1358   3                  I2CPckt.status = I2C_IDLE;
1359   3                  break;
1360   3              default:
1361   3                  break;
1362   3              }
1363   2      
1364   2      
1365   2          }
1366   1          EXIF &= ~0x20;              // Clear interrupt flag for i2c by writing a 0 to it.
1367   1      }
1368          
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 24  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
0000 E4                CLR     A
0001 F500        R     MOV     i,A
0003 F500        R     MOV     i+01H,A
                                           ; SOURCE LINE # 362
0005 120000      R     LCALL   Initialize
                                           ; SOURCE LINE # 378
0008 C280              CLR     PA0
                                           ; SOURCE LINE # 379
000A D2B5              SETB    PD5
                                           ; SOURCE LINE # 380
000C 90E65D            MOV     DPTR,#USBIRQ
000F 74FF              MOV     A,#0FFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
0012 90E65F            MOV     DPTR,#EPIRQ
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
0016 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 385
0019 90E680            MOV     DPTR,#USBCS
001C E0                MOVX    A,@DPTR
001D 54F7              ANL     A,#0F7H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0020 E0                MOVX    A,@DPTR
0021 4402              ORL     A,#02H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0024 C2B1              CLR     PD1
                                           ; SOURCE LINE # 390
0026 7FC8              MOV     R7,#0C8H
0028 7E00              MOV     R6,#00H
002A 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 391
002D D2B1              SETB    PD1
                                           ; SOURCE LINE # 392
002F 7FC8              MOV     R7,#0C8H
0031 7E00              MOV     R6,#00H
0033 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 394
0036 C2B5              CLR     PD5
                                           ; SOURCE LINE # 396
0038 74FF              MOV     A,#0FFH
003A F500        R     MOV     ini,A
003C F500        R     MOV     ini+01H,A
                                           ; SOURCE LINE # 397
003E 850000      R     MOV     t,ini
0041 850000      R     MOV     t+01H,ini+01H
0044         ?C0001:
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 403
0044 300005      R     JNB     GotSudav,?C0003
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 25  

0047 C200        R     CLR     GotSudav
                                           ; SOURCE LINE # 406
0049 120000      R     LCALL   SetupCommand
                                           ; SOURCE LINE # 407
004C         ?C0003:
                                           ; SOURCE LINE # 428
004C E500        R     MOV     A,t+01H
004E 4500        R     ORL     A,t
0050 7050              JNZ     ?C0004
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 432
0052 E500        R     MOV     A,f+01H
0054 4500        R     ORL     A,f
0056 700F              JNZ     ?C0005
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
0058 90E6A7            MOV     DPTR,#EP2FIFOFLGS
005B E0                MOVX    A,@DPTR
005C 30E104            JNB     ACC.1,?C0006
                                           ; SOURCE LINE # 435
005F C280              CLR     PA0
0061 8006              SJMP    ?C0008
0063         ?C0006:
                                           ; SOURCE LINE # 437
0063 B280              CPL     PA0
                                           ; SOURCE LINE # 438
0065 8002              SJMP    ?C0008
0067         ?C0005:
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
0067 D280              SETB    PA0
                                           ; SOURCE LINE # 442
0069         ?C0008:
                                           ; SOURCE LINE # 446
0069 E500        R     MOV     A,p+01H
006B 6500        R     XRL     A,ini+01H
006D 7004              JNZ     ?C0147
006F E500        R     MOV     A,p
0071 6500        R     XRL     A,ini
0073         ?C0147:
0073 6016              JZ      ?C0010
0075 E500        R     MOV     A,f+01H
0077 4500        R     ORL     A,f
0079 6006              JZ      ?C0011
007B E500        R     MOV     A,p+01H
007D 4500        R     ORL     A,p
007F 700A              JNZ     ?C0010
0081         ?C0011:
0081 E500        R     MOV     A,f+01H
0083 B50009      R     CJNE    A,ini+01H,?C0009
0086 E500        R     MOV     A,f
0088 B50004      R     CJNE    A,ini,?C0009
008B         ?C0010:
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
008B C281              CLR     PA1
                                           ; SOURCE LINE # 453
008D 8002              SJMP    ?C0012
008F         ?C0009:
                                           ; SOURCE LINE # 455
008F D281              SETB    PA1
0091         ?C0012:
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 26  

                                           ; SOURCE LINE # 471
0091 850000      R     MOV     t,ini
0094 850000      R     MOV     t+01H,ini+01H
                                           ; SOURCE LINE # 472
0097 E4                CLR     A
0098 F500        R     MOV     f,A
009A F500        R     MOV     f+01H,A
009C F500        R     MOV     p,A
009E F500        R     MOV     p+01H,A
                                           ; SOURCE LINE # 473
00A0 80A2              SJMP    ?C0001
00A2         ?C0004:
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
00A2 E500        R     MOV     A,t+01H
00A4 1500        R     DEC     t+01H
00A6 7002              JNZ     ?C0149
00A8 1500        R     DEC     t
00AA         ?C0149:
                                           ; SOURCE LINE # 478
00AA 90E6A7            MOV     DPTR,#EP2FIFOFLGS
00AD E0                MOVX    A,@DPTR
00AE 30E008            JNB     ACC.0,?C0014
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
00B1 0500        R     INC     f+01H
00B3 E500        R     MOV     A,f+01H
00B5 7002              JNZ     ?C0150
00B7 0500        R     INC     f
00B9         ?C0150:
                                           ; SOURCE LINE # 481
00B9         ?C0014:
                                           ; SOURCE LINE # 483
00B9 90E6A7            MOV     DPTR,#EP2FIFOFLGS
00BC E0                MOVX    A,@DPTR
00BD 30E284            JNB     ACC.2,?C0001
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
00C0 0500        R     INC     p+01H
00C2 E500        R     MOV     A,p+01H
00C4 7002              JNZ     ?C0151
00C6 0500        R     INC     p
00C8         ?C0151:
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 491
00C8 020000      R     LJMP    ?C0001
00CB 22                RET     
             ; FUNCTION main (END)

             ; FUNCTION SetupCommand (BEGIN)
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 529
0000 90E6B8            MOV     DPTR,#SETUPDAT
0003 E0                MOVX    A,@DPTR
0004 5460              ANL     A,#060H
0006 24C0              ADD     A,#0C0H
0008 7003              JNZ     $ + 5H
000A 020000      R     LJMP    ?C0068
000D 2440              ADD     A,#040H
000F 6003              JZ      $ + 5H
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 27  

0011 020000      R     LJMP    ?C0070
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 532
0014         ?C0018:
                                           ; SOURCE LINE # 533
0014 90E6B9            MOV     DPTR,#SETUPDAT+01H
0017 E0                MOVX    A,@DPTR
0018 7003              JNZ     $ + 5H
001A 020000      R     LJMP    ?C0040
001D 14                DEC     A
001E 7003              JNZ     $ + 5H
0020 020000      R     LJMP    ?C0048
0023 24FE              ADD     A,#0FEH
0025 7003              JNZ     $ + 5H
0027 020000      R     LJMP    ?C0058
002A 24FB              ADD     A,#0FBH
002C 7003              JNZ     $ + 5H
002E 020000      R     LJMP    ?C0039
0031 14                DEC     A
0032 7003              JNZ     $ + 5H
0034 020000      R     LJMP    ?C0038
0037 14                DEC     A
0038 7003              JNZ     $ + 5H
003A 020000      R     LJMP    ?C0036
003D 14                DEC     A
003E 7003              JNZ     $ + 5H
0040 020000      R     LJMP    ?C0037
0043 2405              ADD     A,#05H
0045 6003              JZ      $ + 5H
0047 020000      R     LJMP    ?C0067
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
004A         ?C0020:
                                           ; SOURCE LINE # 536
004A 90E6BB            MOV     DPTR,#SETUPDAT+03H
004D E0                MOVX    A,@DPTR
004E 24FE              ADD     A,#0FEH
0050 602B              JZ      ?C0024
0052 14                DEC     A
0053 6042              JZ      ?C0026
0055 24FD              ADD     A,#0FDH
0057 6017              JZ      ?C0023
0059 14                DEC     A
005A 602E              JZ      ?C0025
005C 2406              ADD     A,#06H
005E 6003              JZ      $ + 5H
0060 020000      R     LJMP    ?C0035
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
0063         ?C0022:
                                           ; SOURCE LINE # 539
0063 7400        R     MOV     A,#HIGH myDeviceDscr
0065 90E6B3            MOV     DPTR,#SUDPTRH
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 540
0069 7400        R     MOV     A,#LOW myDeviceDscr
006B A3                INC     DPTR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
006D 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 543
0070         ?C0023:
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 28  

                                           ; SOURCE LINE # 544
0070 7400        R     MOV     A,#HIGH myDeviceQualDscr
0072 90E6B3            MOV     DPTR,#SUDPTRH
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
0076 7400        R     MOV     A,#LOW myDeviceQualDscr
0078 A3                INC     DPTR
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
007A 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 548
007D         ?C0024:
                                           ; SOURCE LINE # 549
007D 7400        R     MOV     A,#HIGH myConfigDscr
007F 90E6B3            MOV     DPTR,#SUDPTRH
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
0083 7400        R     MOV     A,#LOW myConfigDscr
0085 A3                INC     DPTR
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
0087 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 552
008A         ?C0025:
                                           ; SOURCE LINE # 553
008A 7400        R     MOV     A,#HIGH myConfigDscr
008C 90E6B3            MOV     DPTR,#SUDPTRH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0090 7400        R     MOV     A,#LOW myConfigDscr
0092 A3                INC     DPTR
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
0094 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 556
0097         ?C0026:
                                           ; SOURCE LINE # 557
0097 90E6BA            MOV     DPTR,#SETUPDAT+02H
009A E0                MOVX    A,@DPTR
009B 14                DEC     A
009C 6012              JZ      ?C0029
009E 14                DEC     A
009F 6017              JZ      ?C0030
00A1 14                DEC     A
00A2 601C              JZ      ?C0031
00A4 2403              ADD     A,#03H
00A6 7020              JNZ     ?C0032
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
00A8         ?C0028:
                                           ; SOURCE LINE # 560
00A8 750000      R     MOV     ptr,#HIGH string0
00AB 750000      R     MOV     ptr+01H,#LOW string0
                                           ; SOURCE LINE # 561
00AE 801D              SJMP    ?C0027
                                           ; SOURCE LINE # 562
00B0         ?C0029:
                                           ; SOURCE LINE # 563
00B0 750000      R     MOV     ptr,#HIGH string1
00B3 750000      R     MOV     ptr+01H,#LOW string1
                                           ; SOURCE LINE # 564
00B6 8015              SJMP    ?C0027
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 29  

                                           ; SOURCE LINE # 565
00B8         ?C0030:
                                           ; SOURCE LINE # 566
00B8 750000      R     MOV     ptr,#HIGH string2
00BB 750000      R     MOV     ptr+01H,#LOW string2
                                           ; SOURCE LINE # 567
00BE 800D              SJMP    ?C0027
                                           ; SOURCE LINE # 568
00C0         ?C0031:
                                           ; SOURCE LINE # 569
00C0 750000      R     MOV     ptr,#HIGH string3
00C3 750000      R     MOV     ptr+01H,#LOW string3
                                           ; SOURCE LINE # 570
00C6 8005              SJMP    ?C0027
                                           ; SOURCE LINE # 571
00C8         ?C0032:
                                           ; SOURCE LINE # 572
00C8 E4                CLR     A
00C9 F500        R     MOV     ptr,A
00CB F500        R     MOV     ptr+01H,A
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 574
00CD         ?C0027:
                                           ; SOURCE LINE # 575
00CD E500        R     MOV     A,ptr+01H
00CF 4500        R     ORL     A,ptr
00D1 600D              JZ      ?C0033
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
00D3 E500        R     MOV     A,ptr
00D5 90E6B3            MOV     DPTR,#SUDPTRH
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
00D9 E500        R     MOV     A,ptr+01H
00DB A3                INC     DPTR
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 579
00DD 020000      R     LJMP    ?C0017
00E0         ?C0033:
                                           ; SOURCE LINE # 581
00E0 90E6A0            MOV     DPTR,#EP0CS
00E3 E0                MOVX    A,@DPTR
00E4 4401              ORL     A,#01H
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
00E7 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 584
00EA         ?C0035:
                                           ; SOURCE LINE # 585
00EA 90E6A0            MOV     DPTR,#EP0CS
00ED E0                MOVX    A,@DPTR
00EE 4401              ORL     A,#01H
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
00F1 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 590
00F4         ?C0036:
                                           ; SOURCE LINE # 591
00F4 90E740            MOV     DPTR,#EP0BUF
00F7 E500        R     MOV     A,Interface
00F9 F0                MOVX    @DPTR,A
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 30  

                                           ; SOURCE LINE # 592
00FA E4                CLR     A
00FB 90E68A            MOV     DPTR,#EP0BCH
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
00FF A3                INC     DPTR
0100 04                INC     A
0101 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
0102 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 595
0105         ?C0037:
                                           ; SOURCE LINE # 596
0105 90E6BA            MOV     DPTR,#SETUPDAT+02H
0108 E0                MOVX    A,@DPTR
0109 F500        R     MOV     Interface,A
                                           ; SOURCE LINE # 597
010B 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 598
010E         ?C0038:
                                           ; SOURCE LINE # 599
010E 90E6BA            MOV     DPTR,#SETUPDAT+02H
0111 E0                MOVX    A,@DPTR
0112 F500        R     MOV     Configuration,A
                                           ; SOURCE LINE # 600
0114 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 601
0117         ?C0039:
                                           ; SOURCE LINE # 602
0117 90E740            MOV     DPTR,#EP0BUF
011A E500        R     MOV     A,Configuration
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 603
011D E4                CLR     A
011E 90E68A            MOV     DPTR,#EP0BCH
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
0122 A3                INC     DPTR
0123 04                INC     A
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 605
0125 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 606
0128         ?C0040:
                                           ; SOURCE LINE # 607
0128 90E6B8            MOV     DPTR,#SETUPDAT
012B E0                MOVX    A,@DPTR
012C 247F              ADD     A,#07FH
012E 6029              JZ      ?C0043
0130 14                DEC     A
0131 6038              JZ      ?C0044
0133 2402              ADD     A,#02H
0135 6003              JZ      $ + 5H
0137 020000      R     LJMP    ?C0047
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
013A         ?C0042:
                                           ; SOURCE LINE # 610
013A A200        R     MOV     C,Rwuen
013C E4                CLR     A
013D 33                RLC     A
013E FF                MOV     R7,A
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 31  

013F 25E0              ADD     A,ACC
0141 FF                MOV     R7,A
0142 A200        R     MOV     C,Selfpwr
0144 E4                CLR     A
0145 33                RLC     A
0146 4F                ORL     A,R7
0147 90E740            MOV     DPTR,#EP0BUF
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 611
014B E4                CLR     A
014C A3                INC     DPTR
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
014E 90E68A            MOV     DPTR,#EP0BCH
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
0152 A3                INC     DPTR
0153 7402              MOV     A,#02H
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
0156 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 615
0159         ?C0043:
                                           ; SOURCE LINE # 616
0159 E4                CLR     A
015A 90E740            MOV     DPTR,#EP0BUF
015D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
015E A3                INC     DPTR
015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 618
0160 90E68A            MOV     DPTR,#EP0BCH
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0164 A3                INC     DPTR
0165 7402              MOV     A,#02H
0167 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
0168 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 621
016B         ?C0044:
                                           ; SOURCE LINE # 622
016B 90E6BC            MOV     DPTR,#SETUPDAT+04H
016E E0                MOVX    A,@DPTR
016F 547E              ANL     A,#07EH
0171 FF                MOV     R7,A
0172 7E00              MOV     R6,#00H
0174 E0                MOVX    A,@DPTR
0175 D3                SETB    C
0176 9480              SUBB    A,#080H
0178 4006              JC      ?C0045
017A 7C00              MOV     R4,#00H
017C 7D01              MOV     R5,#01H
017E 8004              SJMP    ?C0046
0180         ?C0045:
0180 7C00              MOV     R4,#00H
0182 7D00              MOV     R5,#00H
0184         ?C0046:
0184 EC                MOV     A,R4
0185 4E                ORL     A,R6
0186 FE                MOV     R6,A
0187 ED                MOV     A,R5
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 32  

0188 4F                ORL     A,R7
0189 2400        R     ADD     A,#LOW EPCS_Offset_Lookup_Table
018B F582              MOV     DPL,A
018D 7400        R     MOV     A,#HIGH EPCS_Offset_Lookup_Table
018F 3E                ADDC    A,R6
0190 F583              MOV     DPH,A
0192 E4                CLR     A
0193 93                MOVC    A,@A+DPTR
0194 FF                MOV     R7,A
0195 33                RLC     A
0196 95E0              SUBB    A,ACC
0198 FE                MOV     R6,A
0199 EF                MOV     A,R7
019A 24A1              ADD     A,#0A1H
019C FF                MOV     R7,A
019D EE                MOV     A,R6
019E 34E6              ADDC    A,#0E6H
01A0 8F82              MOV     DPL,R7
01A2 F583              MOV     DPH,A
01A4 E0                MOVX    A,@DPTR
01A5 5401              ANL     A,#01H
01A7 90E740            MOV     DPTR,#EP0BUF
01AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
01AB E4                CLR     A
01AC A3                INC     DPTR
01AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 624
01AE 90E68A            MOV     DPTR,#EP0BCH
01B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
01B2 A3                INC     DPTR
01B3 7402              MOV     A,#02H
01B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
01B6 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 627
01B9         ?C0047:
                                           ; SOURCE LINE # 628
01B9 90E6A0            MOV     DPTR,#EP0CS
01BC E0                MOVX    A,@DPTR
01BD 4401              ORL     A,#01H
01BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
01C0 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 631
01C3         ?C0048:
                                           ; SOURCE LINE # 632
01C3 90E6B8            MOV     DPTR,#SETUPDAT
01C6 E0                MOVX    A,@DPTR
01C7 24FE              ADD     A,#0FEH
01C9 601D              JZ      ?C0053
01CB 2402              ADD     A,#02H
01CD 6003              JZ      $ + 5H
01CF 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
01D2         ?C0050:
                                           ; SOURCE LINE # 635
01D2 90E6BA            MOV     DPTR,#SETUPDAT+02H
01D5 E0                MOVX    A,@DPTR
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 33  

01D6 B40105            CJNE    A,#01H,?C0051
                                           ; SOURCE LINE # 636
01D9 C200        R     CLR     Rwuen
01DB 020000      R     LJMP    ?C0017
01DE         ?C0051:
                                           ; SOURCE LINE # 638
01DE 90E6A0            MOV     DPTR,#EP0CS
01E1 E0                MOVX    A,@DPTR
01E2 4401              ORL     A,#01H
01E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
01E5 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 640
01E8         ?C0053:
                                           ; SOURCE LINE # 641
01E8 90E6BA            MOV     DPTR,#SETUPDAT+02H
01EB E0                MOVX    A,@DPTR
01EC 7059              JNZ     ?C0054
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 645
01EE 90E6BC            MOV     DPTR,#SETUPDAT+04H
01F1 E0                MOVX    A,@DPTR
01F2 547E              ANL     A,#07EH
01F4 FF                MOV     R7,A
01F5 7E00              MOV     R6,#00H
01F7 E0                MOVX    A,@DPTR
01F8 D3                SETB    C
01F9 9480              SUBB    A,#080H
01FB 4006              JC      ?C0055
01FD 7C00              MOV     R4,#00H
01FF 7D01              MOV     R5,#01H
0201 8004              SJMP    ?C0056
0203         ?C0055:
0203 7C00              MOV     R4,#00H
0205 7D00              MOV     R5,#00H
0207         ?C0056:
0207 EC                MOV     A,R4
0208 4E                ORL     A,R6
0209 FE                MOV     R6,A
020A ED                MOV     A,R5
020B 4F                ORL     A,R7
020C 2400        R     ADD     A,#LOW EPCS_Offset_Lookup_Table
020E F582              MOV     DPL,A
0210 7400        R     MOV     A,#HIGH EPCS_Offset_Lookup_Table
0212 3E                ADDC    A,R6
0213 F583              MOV     DPH,A
0215 E4                CLR     A
0216 93                MOVC    A,@A+DPTR
0217 FF                MOV     R7,A
0218 33                RLC     A
0219 95E0              SUBB    A,ACC
021B FE                MOV     R6,A
021C EF                MOV     A,R7
021D 24A1              ADD     A,#0A1H
021F FF                MOV     R7,A
0220 EE                MOV     A,R6
0221 34E6              ADDC    A,#0E6H
0223 8F82              MOV     DPL,R7
0225 F583              MOV     DPH,A
0227 E0                MOVX    A,@DPTR
0228 54FE              ANL     A,#0FEH
022A F0                MOVX    @DPTR,A
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 34  

                                           ; SOURCE LINE # 646
022B 90E6BC            MOV     DPTR,#SETUPDAT+04H
022E E0                MOVX    A,@DPTR
022F 5480              ANL     A,#080H
0231 FF                MOV     R7,A
0232 13                RRC     A
0233 13                RRC     A
0234 13                RRC     A
0235 541F              ANL     A,#01FH
0237 FF                MOV     R7,A
0238 E0                MOVX    A,@DPTR
0239 540F              ANL     A,#0FH
023B 2F                ADD     A,R7
023C 90E683            MOV     DPTR,#TOGCTL
023F F0                MOVX    @DPTR,A
0240 E0                MOVX    A,@DPTR
0241 4420              ORL     A,#020H
0243 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
0244 020000      R     LJMP    ?C0017
0247         ?C0054:
                                           ; SOURCE LINE # 649
0247 90E6A0            MOV     DPTR,#EP0CS
024A E0                MOVX    A,@DPTR
024B 4401              ORL     A,#01H
024D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 650
024E 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0251         ?C0058:
                                           ; SOURCE LINE # 654
0251 90E6B8            MOV     DPTR,#SETUPDAT
0254 E0                MOVX    A,@DPTR
0255 24FE              ADD     A,#0FEH
0257 601B              JZ      ?C0063
0259 2402              ADD     A,#02H
025B 7056              JNZ     ?C0066
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
025D         ?C0060:
                                           ; SOURCE LINE # 657
025D 90E6BA            MOV     DPTR,#SETUPDAT+02H
0260 E0                MOVX    A,@DPTR
0261 B40107            CJNE    A,#01H,?C0061
0264 300004      R     JNB     Rwuen_allowed,?C0061
                                           ; SOURCE LINE # 658
0267 D200        R     SETB    Rwuen
0269 8066              SJMP    ?C0017
026B         ?C0061:
                                           ; SOURCE LINE # 660
026B 90E6A0            MOV     DPTR,#EP0CS
026E E0                MOVX    A,@DPTR
026F 4401              ORL     A,#01H
0271 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
0272 805D              SJMP    ?C0017
                                           ; SOURCE LINE # 662
0274         ?C0063:
                                           ; SOURCE LINE # 663
0274 90E6BC            MOV     DPTR,#SETUPDAT+04H
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 35  

0277 E0                MOVX    A,@DPTR
0278 547E              ANL     A,#07EH
027A FF                MOV     R7,A
027B 7E00              MOV     R6,#00H
027D E0                MOVX    A,@DPTR
027E D3                SETB    C
027F 9480              SUBB    A,#080H
0281 4006              JC      ?C0064
0283 7C00              MOV     R4,#00H
0285 7D01              MOV     R5,#01H
0287 8004              SJMP    ?C0065
0289         ?C0064:
0289 7C00              MOV     R4,#00H
028B 7D00              MOV     R5,#00H
028D         ?C0065:
028D EC                MOV     A,R4
028E 4E                ORL     A,R6
028F FE                MOV     R6,A
0290 ED                MOV     A,R5
0291 4F                ORL     A,R7
0292 2400        R     ADD     A,#LOW EPCS_Offset_Lookup_Table
0294 F582              MOV     DPL,A
0296 7400        R     MOV     A,#HIGH EPCS_Offset_Lookup_Table
0298 3E                ADDC    A,R6
0299 F583              MOV     DPH,A
029B E4                CLR     A
029C 93                MOVC    A,@A+DPTR
029D FF                MOV     R7,A
029E 33                RLC     A
029F 95E0              SUBB    A,ACC
02A1 FE                MOV     R6,A
02A2 EF                MOV     A,R7
02A3 24A1              ADD     A,#0A1H
02A5 FF                MOV     R7,A
02A6 EE                MOV     A,R6
02A7 34E6              ADDC    A,#0E6H
02A9 8F82              MOV     DPL,R7
02AB F583              MOV     DPH,A
02AD E0                MOVX    A,@DPTR
02AE 4401              ORL     A,#01H
02B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 664
02B1 801E              SJMP    ?C0017
                                           ; SOURCE LINE # 665
02B3         ?C0066:
                                           ; SOURCE LINE # 666
02B3 90E6A0            MOV     DPTR,#EP0CS
02B6 E0                MOVX    A,@DPTR
02B7 4401              ORL     A,#01H
02B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
02BA 8015              SJMP    ?C0017
                                           ; SOURCE LINE # 669
02BC         ?C0067:
                                           ; SOURCE LINE # 670
02BC 90E6A0            MOV     DPTR,#EP0CS
02BF E0                MOVX    A,@DPTR
02C0 4401              ORL     A,#01H
02C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
02C3 800C              SJMP    ?C0017
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 36  

                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 676
02C5         ?C0068:
                                           ; SOURCE LINE # 677
02C5 120000      R     LCALL   vendorcommands
02C8 4007              JC      ?C0017
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 688
02CA         ?C0070:
                                           ; SOURCE LINE # 690
02CA 90E6A0            MOV     DPTR,#EP0CS
02CD E0                MOVX    A,@DPTR
02CE 4401              ORL     A,#01H
02D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
02D1         ?C0017:
                                           ; SOURCE LINE # 695
02D1 90E6A0            MOV     DPTR,#EP0CS
02D4 E0                MOVX    A,@DPTR
02D5 4480              ORL     A,#080H
02D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 696
02D8 22                RET     
             ; FUNCTION SetupCommand (END)

             ; FUNCTION vendorcommands (BEGIN)
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 724
0000 E4                CLR     A
0001 F500        R     MOV     ret_len,A
                                           ; SOURCE LINE # 726
0003 90E6BA            MOV     DPTR,#SETUPDAT+02H
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
;---- Variable 'wvalue' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 727
0008 90E6BC            MOV     DPTR,#SETUPDAT+04H
000B E0                MOVX    A,@DPTR
000C F500        R     MOV     windex,A
                                           ; SOURCE LINE # 728
000E 90E6BE            MOV     DPTR,#SETUPDAT+06H
0011 E0                MOVX    A,@DPTR
0012 F500        R     MOV     wlength,A
                                           ; SOURCE LINE # 732
0014 90E6B8            MOV     DPTR,#SETUPDAT
0017 E0                MOVX    A,@DPTR
0018 64C0              XRL     A,#0C0H
001A 7052              JNZ     ?C0072
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 735
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E 244A              ADD     A,#04AH
0020 6029              JZ      ?C0079
0022 24FE              ADD     A,#0FEH
0024 6014              JZ      ?C0077
0026 24F5              ADD     A,#0F5H
0028 7033              JNZ     ?C0080
                                           ; SOURCE LINE # 736
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 37  

                                           ; SOURCE LINE # 739
002A         ?C0074:
                                           ; SOURCE LINE # 740
002A AD00        R     MOV     R5,wlength
002C 120000      R     LCALL   _i2c_read
002F 4004              JC      ?C0075
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
0031 E4                CLR     A
0032 F500        R     MOV     wlength,A
                                           ; SOURCE LINE # 743
0034 22                RET     
                                           ; SOURCE LINE # 744
0035         ?C0075:
                                           ; SOURCE LINE # 745
0035 850000      R     MOV     ret_len,wlength
                                           ; SOURCE LINE # 746
0038 8025              SJMP    ?C0073
                                           ; SOURCE LINE # 749
003A         ?C0077:
                                           ; SOURCE LINE # 750
003A E500        R     MOV     A,wlength
003C 6402              XRL     A,#02H
003E 701F              JNZ     ?C0073
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 752
0040 90E740            MOV     DPTR,#EP0BUF
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
0044 A3                INC     DPTR
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 754
0046 850000      R     MOV     ret_len,wlength
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
0049 8014              SJMP    ?C0073
                                           ; SOURCE LINE # 758
004B         ?C0079:
                                           ; SOURCE LINE # 759
004B E500        R     MOV     A,windex
004D 5407              ANL     A,#07H
004F FF                MOV     R7,A
;---- Variable 'i' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 760
0050 2400        R     ADD     A,#LOW Mac
0052 F8                MOV     R0,A
0053 E6                MOV     A,@R0
0054 90E740            MOV     DPTR,#EP0BUF
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 761
0058 750002      R     MOV     ret_len,#02H
                                           ; SOURCE LINE # 762
005B 8002              SJMP    ?C0073
                                           ; SOURCE LINE # 767
005D         ?C0080:
                                           ; SOURCE LINE # 768
005D C3                CLR     C
005E 22                RET     
                                           ; SOURCE LINE # 769
005F         ?C0073:
                                           ; SOURCE LINE # 771
005F E500        R     MOV     A,ret_len
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 38  

0061 6069              JZ      ?C0082
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
0063 E4                CLR     A
0064 90E68A            MOV     DPTR,#EP0BCH
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 774
0068 A3                INC     DPTR
0069 E500        R     MOV     A,ret_len
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 777
006C 805E              SJMP    ?C0082
006E         ?C0072:
                                           ; SOURCE LINE # 780
006E 90E6B8            MOV     DPTR,#SETUPDAT
0071 E0                MOVX    A,@DPTR
0072 6440              XRL     A,#040H
0074 7056              JNZ     ?C0082
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 783
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 2476              ADD     A,#076H
007A 6050              JZ      ?C0082
007C 24CB              ADD     A,#0CBH
007E 604C              JZ      ?C0082
0080 24FD              ADD     A,#0FDH
0082 6023              JZ      ?C0089
0084 24FE              ADD     A,#0FEH
0086 6027              JZ      ?C0091
0088 2412              ADD     A,#012H
008A 703E              JNZ     ?C0095
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
008C         ?C0085:
                                           ; SOURCE LINE # 787
008C 90E740            MOV     DPTR,#EP0BUF
008F E0                MOVX    A,@DPTR
0090 6430              XRL     A,#030H
0092 7038              JNZ     ?C0082
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
0094 A3                INC     DPTR
0095 E0                MOVX    A,@DPTR
0096 6004              JZ      ?C0087
                                           ; SOURCE LINE # 790
0098 C2B0              CLR     PD0
009A 8002              SJMP    ?C0088
009C         ?C0087:
                                           ; SOURCE LINE # 792
009C D2B0              SETB    PD0
009E         ?C0088:
                                           ; SOURCE LINE # 793
009E 7F0A              MOV     R7,#0AH
00A0 7E00              MOV     R6,#00H
00A2 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
00A5 8025              SJMP    ?C0082
                                           ; SOURCE LINE # 798
00A7         ?C0089:
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 39  

                                           ; SOURCE LINE # 799
00A7 AF00        R     MOV     R7,wlength
00A9 120000      R     LCALL   _i2c_write
00AC 401E              JC      ?C0082
                                           ; SOURCE LINE # 800
                                           ; SOURCE LINE # 806
00AE 22                RET     
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 811
00AF         ?C0091:
                                           ; SOURCE LINE # 812
00AF 90E740            MOV     DPTR,#EP0BUF
00B2 E0                MOVX    A,@DPTR
00B3 B40116            CJNE    A,#01H,?C0082
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
00B6 C2B1              CLR     PD1
                                           ; SOURCE LINE # 815
00B8 7F0A              MOV     R7,#0AH
00BA 7E00              MOV     R6,#00H
00BC 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 816
00BF D2B1              SETB    PD1
                                           ; SOURCE LINE # 817
00C1 7F0A              MOV     R7,#0AH
00C3 7E00              MOV     R6,#00H
00C5 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
00C8 8002              SJMP    ?C0082
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 830
00CA         ?C0095:
                                           ; SOURCE LINE # 831
00CA C3                CLR     C
00CB 22                RET     
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 836
00CC         ?C0082:
                                           ; SOURCE LINE # 839
00CC 00                NOP     
00CD 00                NOP     
00CE 00                NOP     
                                           ; SOURCE LINE # 850
00CF D3                SETB    C
                                           ; SOURCE LINE # 851
00D0         ?C0076:
00D0 22                RET     
             ; FUNCTION vendorcommands (END)

             ; FUNCTION Initialize (BEGIN)
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 858
0000 75B203            MOV     OEA,#03H
                                           ; SOURCE LINE # 859
0003 758003            MOV     IOA,#03H
                                           ; SOURCE LINE # 861
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 40  

0006 75B523            MOV     OED,#023H
                                           ; SOURCE LINE # 862
0009 75B020            MOV     IOD,#020H
                                           ; SOURCE LINE # 864
000C 120000      R     LCALL   I2Cinit
                                           ; SOURCE LINE # 868
000F 758910            MOV     TMOD,#010H
                                           ; SOURCE LINE # 869
0012 E4                CLR     A
0013 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 870
0015 F58A              MOV     TL0,A
                                           ; SOURCE LINE # 871
0017 D28C              SETB    TR0
                                           ; SOURCE LINE # 873
0019 D2A9              SETB    ET0
                                           ; SOURCE LINE # 879
001B F500        R     MOV     ptr,A
001D 750019      R     MOV     ptr+01H,#019H
                                           ; SOURCE LINE # 880
0020 900000      R     MOV     DPTR,#myConfigDscr+02H
0023 E500        R     MOV     A,ptr+01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 881
0026 E500        R     MOV     A,ptr
0028 A3                INC     DPTR
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
002A 90E600            MOV     DPTR,#CPUCS
002D 7410              MOV     A,#010H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 884
0030 00                NOP     
0031 00                NOP     
0032 00                NOP     
                                           ; SOURCE LINE # 885
0033 E4                CLR     A
0034 F58E              MOV     CKCON,A
                                           ; SOURCE LINE # 886
0036 00                NOP     
0037 00                NOP     
0038 00                NOP     
                                           ; SOURCE LINE # 889
0039 90E60B            MOV     DPTR,#REVCTL
003C 7403              MOV     A,#03H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 890
003F 00                NOP     
0040 00                NOP     
0041 00                NOP     
                                           ; SOURCE LINE # 892
0042 90E601            MOV     DPTR,#IFCONFIG
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
0046 00                NOP     
0047 00                NOP     
0048 00                NOP     
                                           ; SOURCE LINE # 913
0049 90E604            MOV     DPTR,#FIFORESET
004C 7480              MOV     A,#080H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 914
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 41  

004F 00                NOP     
0050 00                NOP     
0051 00                NOP     
                                           ; SOURCE LINE # 916
0052 7482              MOV     A,#082H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 917
0055 00                NOP     
0056 00                NOP     
0057 00                NOP     
                                           ; SOURCE LINE # 919
0058 7484              MOV     A,#084H
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
005B 00                NOP     
005C 00                NOP     
005D 00                NOP     
                                           ; SOURCE LINE # 922
005E 7486              MOV     A,#086H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 923
0061 00                NOP     
0062 00                NOP     
0063 00                NOP     
                                           ; SOURCE LINE # 925
0064 7488              MOV     A,#088H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 926
0067 00                NOP     
0068 00                NOP     
0069 00                NOP     
                                           ; SOURCE LINE # 928
006A E4                CLR     A
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 929
006C 00                NOP     
006D 00                NOP     
006E 00                NOP     
                                           ; SOURCE LINE # 932
006F 90E602            MOV     DPTR,#PINFLAGSAB
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 933
0073 00                NOP     
0074 00                NOP     
0075 00                NOP     
                                           ; SOURCE LINE # 934
0076 A3                INC     DPTR
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 935
0078 00                NOP     
0079 00                NOP     
007A 00                NOP     
                                           ; SOURCE LINE # 940
007B 90E630            MOV     DPTR,#EP2FIFOPFH
007E 74C1              MOV     A,#0C1H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 941
0081 00                NOP     
0082 00                NOP     
0083 00                NOP     
                                           ; SOURCE LINE # 942
0084 E4                CLR     A
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 42  

0085 A3                INC     DPTR
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 943
0087 00                NOP     
0088 00                NOP     
0089 00                NOP     
                                           ; SOURCE LINE # 946
008A 90E670            MOV     DPTR,#PORTACFG
008D 7440              MOV     A,#040H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 947
0090 00                NOP     
0091 00                NOP     
0092 00                NOP     
                                           ; SOURCE LINE # 949
0093 90E609            MOV     DPTR,#FIFOPINPOLAR
0096 7404              MOV     A,#04H
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
0099 00                NOP     
009A 00                NOP     
009B 00                NOP     
                                           ; SOURCE LINE # 953
009C 90E612            MOV     DPTR,#EP2CFG
009F 74E0              MOV     A,#0E0H
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 954
00A2 00                NOP     
00A3 00                NOP     
00A4 00                NOP     
                                           ; SOURCE LINE # 956
00A5 E4                CLR     A
00A6 A3                INC     DPTR
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 957
00A8 00                NOP     
00A9 00                NOP     
00AA 00                NOP     
                                           ; SOURCE LINE # 959
00AB A3                INC     DPTR
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 960
00AD 00                NOP     
00AE 00                NOP     
00AF 00                NOP     
                                           ; SOURCE LINE # 962
00B0 A3                INC     DPTR
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 963
00B2 00                NOP     
00B3 00                NOP     
00B4 00                NOP     
                                           ; SOURCE LINE # 966
00B5 90E618            MOV     DPTR,#EP2FIFOCFG
00B8 7408              MOV     A,#08H
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
00BB 00                NOP     
00BC 00                NOP     
00BD 00                NOP     
                                           ; SOURCE LINE # 969
00BE 90E620            MOV     DPTR,#EP2AUTOINLENH
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 43  

00C1 7402              MOV     A,#02H
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 970
00C4 00                NOP     
00C5 00                NOP     
00C6 00                NOP     
                                           ; SOURCE LINE # 972
00C7 E4                CLR     A
00C8 A3                INC     DPTR
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 973
00CA 00                NOP     
00CB 00                NOP     
00CC 00                NOP     
                                           ; SOURCE LINE # 976
00CD 90E619            MOV     DPTR,#EP4FIFOCFG
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 977
00D1 00                NOP     
00D2 00                NOP     
00D3 00                NOP     
                                           ; SOURCE LINE # 979
00D4 A3                INC     DPTR
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
00D6 00                NOP     
00D7 00                NOP     
00D8 00                NOP     
                                           ; SOURCE LINE # 982
00D9 A3                INC     DPTR
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 983
00DB 00                NOP     
00DC 00                NOP     
00DD 00                NOP     
                                           ; SOURCE LINE # 996
00DE 90E668            MOV     DPTR,#INTSETUP
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
00E2 90E660            MOV     DPTR,#GPIFIE
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1002
00E6 90E6B5            MOV     DPTR,#SUDPTRCTL
00E9 04                INC     A
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1006
00EB 90E65E            MOV     DPTR,#EPIE
00EE E0                MOVX    A,@DPTR
00EF 4402              ORL     A,#02H
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1012
00F2 90E65C            MOV     DPTR,#USBIE
00F5 7411              MOV     A,#011H
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1014
00F8 D2E8              SETB    EUSB
                                           ; SOURCE LINE # 1015
00FA D2AF              SETB    EA
                                           ; SOURCE LINE # 1016
00FC 22                RET     
             ; FUNCTION Initialize (END)

C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 44  

             ; FUNCTION USB_isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1033
0008 90E666            MOV     DPTR,#INT2IVEC
000B E0                MOVX    A,@DPTR
000C 24F0              ADD     A,#0F0H
000E 6033              JZ      ?C0102
0010 24EC              ADD     A,#0ECH
0012 6025              JZ      ?C0101
0014 2424              ADD     A,#024H
0016 7031              JNZ     ?C0097
                                           ; SOURCE LINE # 1034
                                           ; SOURCE LINE # 1035
0018         ?C0098:
                                           ; SOURCE LINE # 1036
0018 90E65D            MOV     DPTR,#USBIRQ
001B 7401              MOV     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1040
001E 90E6B8            MOV     DPTR,#SETUPDAT
0021 E0                MOVX    A,@DPTR
0022 B44010            CJNE    A,#040H,?C0099
0025 90E6BE            MOV     DPTR,#SETUPDAT+06H
0028 E0                MOVX    A,@DPTR
0029 600A              JZ      ?C0099
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1043
002B 90E68B            MOV     DPTR,#EP0BCL
002E E4                CLR     A
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1044
0030 00                NOP     
0031 00                NOP     
0032 00                NOP     
                                           ; SOURCE LINE # 1046
0033 8014              SJMP    ?C0097
0035         ?C0099:
                                           ; SOURCE LINE # 1048
0035 D200        R     SETB    GotSudav
                                           ; SOURCE LINE # 1053
0037 8010              SJMP    ?C0097
                                           ; SOURCE LINE # 1055
0039         ?C0101:
                                           ; SOURCE LINE # 1056
0039 90E65F            MOV     DPTR,#EPIRQ
003C 7402              MOV     A,#02H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1057
003F D200        R     SETB    GotSudav
                                           ; SOURCE LINE # 1059
0041 8006              SJMP    ?C0097
                                           ; SOURCE LINE # 1061
0043         ?C0102:
                                           ; SOURCE LINE # 1062
0043 90E65D            MOV     DPTR,#USBIRQ
0046 7410              MOV     A,#010H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 45  

                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
0049         ?C0097:
                                           ; SOURCE LINE # 1068
0049 5391EF            ANL     EXIF,#0EFH
                                           ; SOURCE LINE # 1070
004C D0D0              POP     PSW
004E D082              POP     DPL
0050 D083              POP     DPH
0052 D0E0              POP     ACC
0054 32                RETI    
             ; FUNCTION USB_isr (END)

             ; FUNCTION Tim0_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1076
0004 E500        R     MOV     A,Millisecs+03H
0006 2402              ADD     A,#02H
0008 F500        R     MOV     Millisecs+03H,A
000A E4                CLR     A
000B 3500        R     ADDC    A,Millisecs+02H
000D F500        R     MOV     Millisecs+02H,A
000F E4                CLR     A
0010 3500        R     ADDC    A,Millisecs+01H
0012 F500        R     MOV     Millisecs+01H,A
0014 E4                CLR     A
0015 3500        R     ADDC    A,Millisecs
0017 F500        R     MOV     Millisecs,A
                                           ; SOURCE LINE # 1077
0019 E500        R     MOV     A,Tim1+01H
001B 4500        R     ORL     A,Tim1
001D 6008              JZ      ?C0105
001F E500        R     MOV     A,Tim1+01H
0021 1500        R     DEC     Tim1+01H
0023 7002              JNZ     ?C0152
0025 1500        R     DEC     Tim1
0027         ?C0152:
0027         ?C0105:
                                           ; SOURCE LINE # 1078
0027 E500        R     MOV     A,Delaytim+01H
0029 4500        R     ORL     A,Delaytim
002B 6008              JZ      ?C0107
002D E500        R     MOV     A,Delaytim+01H
002F 1500        R     DEC     Delaytim+01H
0031 7002              JNZ     ?C0153
0033 1500        R     DEC     Delaytim
0035         ?C0153:
                                           ; SOURCE LINE # 1079
0035         ?C0107:
0035 D0D0              POP     PSW
0037 D0E0              POP     ACC
0039 32                RETI    
             ; FUNCTION Tim0_int (END)

             ; FUNCTION _delay (BEGIN)
                                           ; SOURCE LINE # 1117
;---- Variable 'ms' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 46  

0000 EE                MOV     A,R6
0001 C3                CLR     C
0002 13                RRC     A
0003 F500        R     MOV     Delaytim,A
0005 EF                MOV     A,R7
0006 13                RRC     A
0007 F500        R     MOV     Delaytim+01H,A
0009         ?C0108:
                                           ; SOURCE LINE # 1121
0009 E500        R     MOV     A,Delaytim+01H
000B 4500        R     ORL     A,Delaytim
000D 70FA              JNZ     ?C0108
                                           ; SOURCE LINE # 1123
000F         ?C0110:
000F 22                RET     
             ; FUNCTION _delay (END)

             ; FUNCTION _mcopy (BEGIN)
                                           ; SOURCE LINE # 1127
0000 8B00        R     MOV     from,R3
0002 8A00        R     MOV     from+01H,R2
0004 8900        R     MOV     from+02H,R1
                                           ; SOURCE LINE # 1128
0006         ?C0111:
                                           ; SOURCE LINE # 1129
0006 AF00        R     MOV     R7,len
0008 1500        R     DEC     len
000A EF                MOV     A,R7
000B 6026              JZ      ?C0113
000D AB00        R     MOV     R3,from
000F 0500        R     INC     from+02H
0011 E500        R     MOV     A,from+02H
0013 AA00        R     MOV     R2,from+01H
0015 7002              JNZ     ?C0154
0017 0500        R     INC     from+01H
0019         ?C0154:
0019 14                DEC     A
001A F9                MOV     R1,A
001B 120000      E     LCALL   ?C?CLDPTR
001E FF                MOV     R7,A
001F AB00        R     MOV     R3,to
0021 0500        R     INC     to+02H
0023 E500        R     MOV     A,to+02H
0025 AA00        R     MOV     R2,to+01H
0027 7002              JNZ     ?C0155
0029 0500        R     INC     to+01H
002B         ?C0155:
002B 14                DEC     A
002C F9                MOV     R1,A
002D EF                MOV     A,R7
002E 120000      E     LCALL   ?C?CSTPTR
0031 80D3              SJMP    ?C0111
                                           ; SOURCE LINE # 1130
0033         ?C0113:
0033 22                RET     
             ; FUNCTION _mcopy (END)

             ; FUNCTION _i2c_read (BEGIN)
                                           ; SOURCE LINE # 1144
;---- Variable 'wlength' assigned to Register 'R5' ----
;---- Variable 'wvalue' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1145
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 47  

                                           ; SOURCE LINE # 1147
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 13                RRC     A
0003 FF                MOV     R7,A
;---- Variable 'adr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1148
0004 ED                MOV     A,R5
0005 24FE              ADD     A,#0FEH
0007 F500        R     MOV     len,A
                                           ; SOURCE LINE # 1150
0009 D3                SETB    C
000A 9446              SUBB    A,#046H
000C 5006              JNC     ?C0115
000E ED                MOV     A,R5
000F C3                CLR     C
0010 9403              SUBB    A,#03H
0012 5002              JNC     ?C0114
0014         ?C0115:
0014 C3                CLR     C
0015 22                RET     
0016         ?C0114:
                                           ; SOURCE LINE # 1152
0016 7A00        R     MOV     R2,#HIGH Iobuf
0018 7B00        R     MOV     R3,#LOW Iobuf
001A AD00        R     MOV     R5,len
001C 120000      R     LCALL   _I2Cread
001F 9200        R     MOV     ret,C
                                           ; SOURCE LINE # 1153
0021 7AE7              MOV     R2,#HIGH EP0BUF+02H
0023 7942              MOV     R1,#LOW EP0BUF+02H
0025 750001      R     MOV     ?_mcopy?BYTE+03H,#01H
0028 7500E7      R     MOV     ?_mcopy?BYTE+04H,#HIGH EP0BUF+02H
002B 750042      R     MOV     ?_mcopy?BYTE+05H,#LOW EP0BUF+02H
002E 850000      R     MOV     ?_mcopy?BYTE+06H,len
0031 7B01              MOV     R3,#01H
0033 7A00        R     MOV     R2,#HIGH Iobuf
0035 7900        R     MOV     R1,#LOW Iobuf
0037 120000      R     LCALL   _mcopy
                                           ; SOURCE LINE # 1154
003A A200        R     MOV     C,ret
                                           ; SOURCE LINE # 1155
003C         ?C0116:
003C 22                RET     
             ; FUNCTION _i2c_read (END)

             ; FUNCTION _i2c_write (BEGIN)
                                           ; SOURCE LINE # 1167
;---- Variable 'wlength' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1170
0002 90E740            MOV     DPTR,#EP0BUF
0005 E0                MOVX    A,@DPTR
0006 FF                MOV     R7,A
0007 C3                CLR     C
0008 13                RRC     A
;---- Variable 'adr' assigned to Register 'R4' ----
0009 FC                MOV     R4,A
                                           ; SOURCE LINE # 1171
000A EE                MOV     A,R6
000B 24FE              ADD     A,#0FEH
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 48  

;---- Variable 'len' assigned to Register 'R5' ----
000D FD                MOV     R5,A
                                           ; SOURCE LINE # 1173
000E D3                SETB    C
000F 9446              SUBB    A,#046H
0011 4001              JC      ?C0117
0013 22                RET     
0014         ?C0117:
                                           ; SOURCE LINE # 1174
0014 750001      R     MOV     ?_mcopy?BYTE+03H,#01H
0017 750000      R     MOV     ?_mcopy?BYTE+04H,#HIGH Iobuf
001A 750000      R     MOV     ?_mcopy?BYTE+05H,#LOW Iobuf
001D 8D00        R     MOV     ?_mcopy?BYTE+06H,R5
001F 7B01              MOV     R3,#01H
0021 7AE7              MOV     R2,#HIGH EP0BUF+02H
0023 7942              MOV     R1,#LOW EP0BUF+02H
0025 120000      R     LCALL   _mcopy
                                           ; SOURCE LINE # 1175
0028 AF04              MOV     R7,AR4
002A 7A00        R     MOV     R2,#HIGH Iobuf
002C 7B00        R     MOV     R3,#LOW Iobuf
002E 120000      R     LCALL   _I2Cwrite
0031 9200        R     MOV     ret,C
                                           ; SOURCE LINE # 1176
0033 A200        R     MOV     C,ret
                                           ; SOURCE LINE # 1177
0035         ?C0118:
0035 22                RET     
             ; FUNCTION _i2c_write (END)

             ; FUNCTION I2Cinit (BEGIN)
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
                                           ; SOURCE LINE # 1220
0000 E4                CLR     A
0001 F500        R     MOV     I2CPckt+05H,A
                                           ; SOURCE LINE # 1221
0003 90E67A            MOV     DPTR,#I2CTL
0006 7403              MOV     A,#03H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1222
0009 D2E9              SETB    EI2C
                                           ; SOURCE LINE # 1223
000B 22                RET     
             ; FUNCTION I2Cinit (END)

             ; FUNCTION _I2Cwrite (BEGIN)
                                           ; SOURCE LINE # 1230
;---- Variable 'addr' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'dat' assigned to Register 'R2/R3' ----
;---- Variable 'length' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
0002 90E678            MOV     DPTR,#I2CS
0005 E0                MOVX    A,@DPTR
0006 4480              ORL     A,#080H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1233
0009 EC                MOV     A,R4
000A 25E0              ADD     A,ACC
000C A3                INC     DPTR
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 49  

000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1235
000E 750001      R     MOV     I2CPckt+05H,#01H
                                           ; SOURCE LINE # 1237
0011 8D00        R     MOV     I2CPckt,R5
                                           ; SOURCE LINE # 1238
0013 AF03              MOV     R7,AR3
0015 A907              MOV     R1,AR7
0017 750001      R     MOV     I2CPckt+01H,#01H
001A 8A00        R     MOV     I2CPckt+02H,R2
001C 8900        R     MOV     I2CPckt+03H,R1
                                           ; SOURCE LINE # 1239
001E E4                CLR     A
001F F500        R     MOV     I2CPckt+04H,A
0021         ?C0120:
                                           ; SOURCE LINE # 1241
0021 E500        R     MOV     A,I2CPckt+05H
0023 600F              JZ      ?C0121
                                           ; SOURCE LINE # 1242
                                           ; SOURCE LINE # 1243
0025 B407F9            CJNE    A,#07H,?C0120
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
0028 90E678            MOV     DPTR,#I2CS
002B E0                MOVX    A,@DPTR
002C 4440              ORL     A,#040H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1246
002F 750009      R     MOV     I2CPckt+05H,#09H
                                           ; SOURCE LINE # 1247
0032 C3                CLR     C
0033 22                RET     
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1249
0034         ?C0121:
                                           ; SOURCE LINE # 1250
0034 D3                SETB    C
                                           ; SOURCE LINE # 1251
0035         ?C0123:
0035 22                RET     
             ; FUNCTION _I2Cwrite (END)

             ; FUNCTION _I2Cread (BEGIN)
                                           ; SOURCE LINE # 1258
;---- Variable 'addr' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'dat' assigned to Register 'R2/R3' ----
;---- Variable 'length' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1259
                                           ; SOURCE LINE # 1260
0002 90E678            MOV     DPTR,#I2CS
0005 E0                MOVX    A,@DPTR
0006 4480              ORL     A,#080H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1261
0009 EC                MOV     A,R4
000A 25E0              ADD     A,ACC
000C 4401              ORL     A,#01H
000E A3                INC     DPTR
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1263
0010 750003      R     MOV     I2CPckt+05H,#03H
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 50  

                                           ; SOURCE LINE # 1265
0013 8D00        R     MOV     I2CPckt,R5
                                           ; SOURCE LINE # 1266
0015 AF03              MOV     R7,AR3
0017 A907              MOV     R1,AR7
0019 750001      R     MOV     I2CPckt+01H,#01H
001C 8A00        R     MOV     I2CPckt+02H,R2
001E 8900        R     MOV     I2CPckt+03H,R1
                                           ; SOURCE LINE # 1267
0020 E4                CLR     A
0021 F500        R     MOV     I2CPckt+04H,A
0023         ?C0124:
                                           ; SOURCE LINE # 1269
0023 E500        R     MOV     A,I2CPckt+05H
0025 600F              JZ      ?C0125
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1271
0027 B407F9            CJNE    A,#07H,?C0124
                                           ; SOURCE LINE # 1272
                                           ; SOURCE LINE # 1273
002A 90E678            MOV     DPTR,#I2CS
002D E0                MOVX    A,@DPTR
002E 4440              ORL     A,#040H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1274
0031 750009      R     MOV     I2CPckt+05H,#09H
                                           ; SOURCE LINE # 1275
0034 C3                CLR     C
0035 22                RET     
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
0036         ?C0125:
                                           ; SOURCE LINE # 1278
0036 D3                SETB    C
                                           ; SOURCE LINE # 1279
0037         ?C0127:
0037 22                RET     
             ; FUNCTION _I2Cread (END)

             ; FUNCTION i2c_isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D000            MOV     PSW,#00H
000B C000              PUSH    AR0
000D C001              PUSH    AR1
000F C002              PUSH    AR2
0011 C003              PUSH    AR3
0013 C007              PUSH    AR7
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1304
0015 90E678            MOV     DPTR,#I2CS
0018 E0                MOVX    A,@DPTR
0019 30E206            JNB     ACC.2,?C0128
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1307
001C 750006      R     MOV     I2CPckt+05H,#06H
                                           ; SOURCE LINE # 1308
001F 020000      R     LJMP    ?C0129
0022         ?C0128:
                                           ; SOURCE LINE # 1309
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 51  

0022 90E678            MOV     DPTR,#I2CS
0025 E0                MOVX    A,@DPTR
0026 20E10C            JB      ACC.1,?C0130
0029 E500        R     MOV     A,I2CPckt+05H
002B 6402              XRL     A,#02H
002D 6006              JZ      ?C0130
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1312
002F 750007      R     MOV     I2CPckt+05H,#07H
                                           ; SOURCE LINE # 1315
0032 020000      R     LJMP    ?C0129
0035         ?C0130:
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1318
0035 E500        R     MOV     A,I2CPckt+05H
0037 24FE              ADD     A,#0FEH
0039 605E              JZ      ?C0137
003B 14                DEC     A
003C 6036              JZ      ?C0135
003E 24FE              ADD     A,#0FEH
0040 7003              JNZ     $ + 5H
0042 020000      R     LJMP    ?C0141
0045 24FC              ADD     A,#0FCH
0047 7003              JNZ     $ + 5H
0049 020000      R     LJMP    ?C0144
004C 2408              ADD     A,#08H
004E 6003              JZ      $ + 5H
0050 020000      R     LJMP    ?C0129
                                           ; SOURCE LINE # 1319
                                           ; SOURCE LINE # 1320
0053         ?C0133:
                                           ; SOURCE LINE # 1321
0053 AB00        R     MOV     R3,I2CPckt+01H
0055 AA00        R     MOV     R2,I2CPckt+02H
0057 A900        R     MOV     R1,I2CPckt+03H
0059 AF00        R     MOV     R7,I2CPckt+04H
005B 0500        R     INC     I2CPckt+04H
005D 8F82              MOV     DPL,R7
005F 758300            MOV     DPH,#00H
0062 120000      E     LCALL   ?C?CLDOPTR
0065 90E679            MOV     DPTR,#I2DAT
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1322
0069 E500        R     MOV     A,I2CPckt+04H
006B 6500        R     XRL     A,I2CPckt
006D 7079              JNZ     ?C0129
                                           ; SOURCE LINE # 1323
006F 750005      R     MOV     I2CPckt+05H,#05H
                                           ; SOURCE LINE # 1324
0072 8074              SJMP    ?C0129
                                           ; SOURCE LINE # 1325
0074         ?C0135:
                                           ; SOURCE LINE # 1326
0074 90E679            MOV     DPTR,#I2DAT
0077 E0                MOVX    A,@DPTR
0078 AB00        R     MOV     R3,I2CPckt+01H
007A AA00        R     MOV     R2,I2CPckt+02H
007C A900        R     MOV     R1,I2CPckt+03H
007E 850082      R     MOV     DPL,I2CPckt+04H
0081 758300            MOV     DPH,#00H
0084 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1327
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 52  

0087 750002      R     MOV     I2CPckt+05H,#02H
                                           ; SOURCE LINE # 1328
008A E500        R     MOV     A,I2CPckt
008C 6401              XRL     A,#01H
008E 7058              JNZ     ?C0129
                                           ; SOURCE LINE # 1329
0090 90E678            MOV     DPTR,#I2CS
0093 E0                MOVX    A,@DPTR
0094 4420              ORL     A,#020H
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1330
0097 804F              SJMP    ?C0129
                                           ; SOURCE LINE # 1331
0099         ?C0137:
                                           ; SOURCE LINE # 1332
0099 E500        R     MOV     A,I2CPckt
009B 24FE              ADD     A,#0FEH
009D B50007      R     CJNE    A,I2CPckt+04H,?C0138
                                           ; SOURCE LINE # 1333
00A0 90E678            MOV     DPTR,#I2CS
00A3 E0                MOVX    A,@DPTR
00A4 4420              ORL     A,#020H
00A6 F0                MOVX    @DPTR,A
00A7         ?C0138:
                                           ; SOURCE LINE # 1334
00A7 E500        R     MOV     A,I2CPckt
00A9 14                DEC     A
00AA B5000D      R     CJNE    A,I2CPckt+04H,?C0139
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1336
00AD 200007      R     JB      noSTOP,?C0140
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1338
00B0 90E678            MOV     DPTR,#I2CS
00B3 E0                MOVX    A,@DPTR
00B4 4440              ORL     A,#040H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1339
00B7         ?C0140:
                                           ; SOURCE LINE # 1340
00B7 750000      R     MOV     I2CPckt+05H,#00H
                                           ; SOURCE LINE # 1341
00BA         ?C0139:
                                           ; SOURCE LINE # 1342
00BA 90E679            MOV     DPTR,#I2DAT
00BD E0                MOVX    A,@DPTR
00BE AB00        R     MOV     R3,I2CPckt+01H
00C0 AA00        R     MOV     R2,I2CPckt+02H
00C2 A900        R     MOV     R1,I2CPckt+03H
00C4 850082      R     MOV     DPL,I2CPckt+04H
00C7 758300            MOV     DPH,#00H
00CA 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1343
00CD 0500        R     INC     I2CPckt+04H
                                           ; SOURCE LINE # 1344
00CF 8017              SJMP    ?C0129
                                           ; SOURCE LINE # 1347
00D1         ?C0141:
                                           ; SOURCE LINE # 1348
00D1 300005      R     JNB     noSTOP,?C0142
                                           ; SOURCE LINE # 1349
00D4 750000      R     MOV     I2CPckt+05H,#00H
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 53  

00D7 800F              SJMP    ?C0129
00D9         ?C0142:
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1352
00D9 90E678            MOV     DPTR,#I2CS
00DC E0                MOVX    A,@DPTR
00DD 4440              ORL     A,#040H
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1353
00E0 750009      R     MOV     I2CPckt+05H,#09H
                                           ; SOURCE LINE # 1354
                                           ; SOURCE LINE # 1356
00E3 8003              SJMP    ?C0129
                                           ; SOURCE LINE # 1357
00E5         ?C0144:
                                           ; SOURCE LINE # 1358
00E5 750000      R     MOV     I2CPckt+05H,#00H
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1361
                                           ; SOURCE LINE # 1362
                                           ; SOURCE LINE # 1365
00E8         ?C0129:
                                           ; SOURCE LINE # 1366
00E8 5391DF            ANL     EXIF,#0DFH
                                           ; SOURCE LINE # 1367
00EB D007              POP     AR7
00ED D003              POP     AR3
00EF D002              POP     AR2
00F1 D001              POP     AR1
00F3 D000              POP     AR0
00F5 D0D0              POP     PSW
00F7 D082              POP     DPL
00F9 D083              POP     DPH
00FB D0E0              POP     ACC
00FD 32                RETI    
             ; FUNCTION i2c_isr (END)

C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 54  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


BYTE . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
WORD . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
DWORD. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
BOOL . . . . . . . . . . . . . . . . .  TYPEDEF  DATA   BIT      -----  1
DSCR . . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
DEVICEDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  18
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  spec_ver_minor . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  spec_ver_major . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  dev_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  sub_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  protocol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  max_packet . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  vendor_id. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  product_id . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  version_id . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  mfg_str. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  prod_str . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  serialnum_str. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  configs. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
DEVICEQUALDSCR . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  10
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  spec_ver_minor . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  spec_ver_major . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  dev_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  sub_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  protocol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  max_packet . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  configs. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  reserved0. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
CONFIGDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  config_len . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  interfaces . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  index. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  config_str . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  attrib . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  power. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
INTRFCDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  index. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  alt_setting. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  ep_cnt . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  class. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  sub_class. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  protocol . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
  interface_str. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
ENDPNTDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  7
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 55  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ep_type. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  mp_L . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  mp_H . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  interval . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
STRINGDSCR . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
EPIOC. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2
  cntrl. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  bytes. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
I2CPCKT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  length . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  dat. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  count. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
I2CPckt. . . . . . . . . . . . . . . .  PUBLIC   DATA   STRUCT   0000H  6
GPIF_WAVE_DATA . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E400H  1
RES_WAVEDATA_END . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E480H  1
CPUCS. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E600H  1
IFCONFIG . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E601H  1
PINFLAGSAB . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E602H  1
PINFLAGSCD . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E603H  1
FIFORESET. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E604H  1
BREAKPT. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E605H  1
BPADDRH. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E606H  1
BPADDRL. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E607H  1
UART230. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E608H  1
FIFOPINPOLAR . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E609H  1
REVID. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E60AH  1
REVCTL . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E60BH  1
EP1OUTCFG. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E610H  1
EP1INCFG . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E611H  1
EP2CFG . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E612H  1
EP4CFG . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E613H  1
EP6CFG . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E614H  1
EP8CFG . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E615H  1
EP2FIFOCFG . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E618H  1
EP4FIFOCFG . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E619H  1
EP6FIFOCFG . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E61AH  1
EP8FIFOCFG . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E61BH  1
EP2AUTOINLENH. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E620H  1
EP2AUTOINLENL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E621H  1
EP4AUTOINLENH. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E622H  1
EP4AUTOINLENL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E623H  1
EP6AUTOINLENH. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E624H  1
EP6AUTOINLENL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E625H  1
EP8AUTOINLENH. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E626H  1
EP8AUTOINLENL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E627H  1
EP2FIFOPFH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E630H  1
EP2FIFOPFL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E631H  1
EP4FIFOPFH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E632H  1
EP4FIFOPFL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E633H  1
EP6FIFOPFH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E634H  1
EP6FIFOPFL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E635H  1
EP8FIFOPFH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E636H  1
EP8FIFOPFL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E637H  1
EP2ISOINPKTS . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E640H  1
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 56  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


EP4ISOINPKTS . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E641H  1
EP6ISOINPKTS . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E642H  1
EP8ISOINPKTS . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E643H  1
INPKTEND . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E648H  1
OUTPKTEND. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E649H  1
EP2FIFOIE. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E650H  1
EP2FIFOIRQ . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E651H  1
EP4FIFOIE. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E652H  1
EP4FIFOIRQ . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E653H  1
EP6FIFOIE. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E654H  1
EP6FIFOIRQ . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E655H  1
EP8FIFOIE. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E656H  1
EP8FIFOIRQ . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E657H  1
IBNIE. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E658H  1
IBNIRQ . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E659H  1
NAKIE. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E65AH  1
NAKIRQ . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E65BH  1
USBIE. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E65CH  1
USBIRQ . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E65DH  1
EPIE . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E65EH  1
EPIRQ. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E65FH  1
GPIFIE . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E660H  1
GPIFIRQ. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E661H  1
USBERRIE . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E662H  1
USBERRIRQ. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E663H  1
ERRCNTLIM. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E664H  1
CLRERRCNT. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E665H  1
INT2IVEC . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E666H  1
INT4IVEC . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E667H  1
INTSETUP . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E668H  1
PORTACFG . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E670H  1
PORTCCFG . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E671H  1
PORTECFG . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E672H  1
I2CS . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E678H  1
I2DAT. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E679H  1
I2CTL. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E67AH  1
XAUTODAT1. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E67BH  1
XAUTODAT2. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E67CH  1
USBCS. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E680H  1
SUSPEND. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E681H  1
WAKEUPCS . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E682H  1
TOGCTL . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E683H  1
USBFRAMEH. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E684H  1
USBFRAMEL. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E685H  1
MICROFRAME . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E686H  1
FNADDR . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E687H  1
EP0BCH . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E68AH  1
EP0BCL . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E68BH  1
EP1OUTBC . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E68DH  1
EP1INBC. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E68FH  1
EP2BCH . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E690H  1
EP2BCL . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E691H  1
EP4BCH . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E694H  1
EP4BCL . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E695H  1
EP6BCH . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E698H  1
EP6BCL . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E699H  1
EP8BCH . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E69CH  1
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 57  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


EP8BCL . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E69DH  1
EP0CS. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A0H  1
EP1OUTCS . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A1H  1
EP1INCS. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A2H  1
EP2CS. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A3H  1
EP4CS. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A4H  1
EP6CS. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A5H  1
EP8CS. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A6H  1
EP2FIFOFLGS. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A7H  1
EP4FIFOFLGS. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A8H  1
EP6FIFOFLGS. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6A9H  1
EP8FIFOFLGS. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6AAH  1
EP2FIFOBCH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6ABH  1
EP2FIFOBCL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6ACH  1
EP4FIFOBCH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6ADH  1
EP4FIFOBCL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6AEH  1
EP6FIFOBCH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6AFH  1
EP6FIFOBCL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6B0H  1
EP8FIFOBCH . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6B1H  1
EP8FIFOBCL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6B2H  1
SUDPTRH. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6B3H  1
SUDPTRL. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6B4H  1
SUDPTRCTL. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6B5H  1
SETUPDAT . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    E6B8H  8
GPIFWFSELECT . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C0H  1
GPIFIDLECS . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C1H  1
GPIFIDLECTL. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C2H  1
GPIFCTLCFG . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C3H  1
GPIFADRH . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C4H  1
GPIFADRL . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C5H  1
GPIFTCB3 . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6CEH  1
GPIFTCB2 . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6CFH  1
GPIFTCB1 . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6D0H  1
GPIFTCB0 . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6D1H  1
EP2GPIFFLGSEL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6D2H  1
EP2GPIFPFSTOP. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6D3H  1
EP2GPIFTRIG. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6D4H  1
EP4GPIFFLGSEL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6DAH  1
EP4GPIFPFSTOP. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6DBH  1
EP4GPIFTRIG. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6DCH  1
EP6GPIFFLGSEL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6E2H  1
EP6GPIFPFSTOP. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6E3H  1
EP6GPIFTRIG. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6E4H  1
EP8GPIFFLGSEL. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6EAH  1
EP8GPIFPFSTOP. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6EBH  1
EP8GPIFTRIG. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6ECH  1
XGPIFSGLDATH . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F0H  1
XGPIFSGLDATLX. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F1H  1
XGPIFSGLDATLNOX. . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F2H  1
GPIFREADYCFG . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F3H  1
GPIFREADYSTAT. . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F4H  1
GPIFABORT. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F5H  1
FLOWSTATE. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C6H  1
FLOWLOGIC. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C7H  1
FLOWEQ0CTL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C8H  1
FLOWEQ1CTL . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6C9H  1
FLOWHOLDOFF. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6CAH  1
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 58  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


FLOWSTB. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6CBH  1
FLOWSTBEDGE. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6CCH  1
FLOWSTBHPERIOD . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6CDH  1
GPIFHOLDAMOUNT . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E60CH  1
UDMACRCH . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E67DH  1
UDMACRCL . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E67EH  1
UDMACRCQUAL. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E67FH  1
DBUG . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F8H  1
TESTCFG. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6F9H  1
USBTEST. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6FAH  1
CT1. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6FBH  1
CT2. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6FCH  1
CT3. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6FDH  1
CT4. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E6FEH  1
EP0BUF . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    E740H  64
EP1OUTBUF. . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    E780H  64
EP1INBUF . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    E7C0H  64
EP2FIFOBUF . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    F000H  1024
EP4FIFOBUF . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    F400H  1024
EP6FIFOBUF . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    F800H  1024
EP8FIFOBUF . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    FC00H  1024
ECCCFG . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E628H  1
ECCRESET . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E629H  1
ECC1B0 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E62AH  1
ECC1B1 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E62BH  1
ECC1B2 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E62CH  1
ECC2B0 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E62DH  1
ECC2B1 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E62EH  1
ECC2B2 . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E62FH  1
GPCR2. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   E50DH  1
IOA. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
PA0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
PA1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
EXIF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
IOD. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
PD0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
PD1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
PD5. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
OEA. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
OED. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
EUSB . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
EI2C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
SetupCommand . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
vendorcommands . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wvalue . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  wlength. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  windex . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  ret_len. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
Initialize . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 59  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ms . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_i2c_read. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wvalue . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  wlength. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  adr. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  len. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_i2c_write . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  wlength. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  adr. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
I2Cinit. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_I2Cwrite. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  length . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0002H  2
_I2Cread . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
  length . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0002H  2
_mcopy . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  from . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  to . . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0003H  3
  len. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0006H  1
myDeviceDscr . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0000H  18
myDeviceQualDscr . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   0012H  10
myConfigDscr . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    001CH  25
dummy. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0035H  1
string0. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0036H  4
string1. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    003AH  8
string2. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0042H  32
string3. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0062H  18
Rwuen_allowed. . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
Rwuen. . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
Selfpwr. . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
ptr. . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0006H  2
Configuration. . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0008H  1
Interface. . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0009H  1
Millisecs. . . . . . . . . . . . . . .  PUBLIC   DATA   U_LONG   000AH  4
Tim1 . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    000EH  2
Delaytim . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0010H  2
Iobuf. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0074H  70
GotSudav . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0003H  1
noSTOP . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0004H  1
Mac. . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0012H  8
EPCS_Offset_Lookup_Table . . . . . . .  PUBLIC   CODE   ARRAY    0000H  10
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
  t. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  ini. . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  p. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0006H  2
  f. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0008H  2
USB_isr. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Tim0_int . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
i2c_isr. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----

C51 COMPILER V7.07   MPEGTS                                                                03/03/2024 14:43:55 PAGE 60  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2097    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =    186    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
